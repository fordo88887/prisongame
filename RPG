<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text-Based RPG - Full System (Final Compilation)</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f0f0f0; color: #333; line-height: 1.6; margin: 0; padding: 20px; }
        .container { max-width: 1050px; margin: 20px auto; background-color: #fff; padding: 25px; border-radius: 8px; box-shadow: 0 0 15px rgba(0,0,0,0.1); }
        h1, h2, h3 { color: #4a3a71; text-align: center; }
        h2 { margin-top: 30px; border-bottom: 2px solid #eee; padding-bottom: 10px; }
        button { background-color: #6a5acd; color: white; padding: 10px 18px; border: none; border-radius: 4px; cursor: pointer; font-size: 1em; transition: background-color 0.3s ease; margin: 5px; }
        button:hover { background-color: #483d8b; }
        button.positive-action { background-color: #28a745; }
        button.positive-action:hover { background-color: #218838; }
        button.action-button { background-color: #007bff; margin: 5px 3px; }
        button.action-button:hover { background-color: #0056b3; }
        button.combat-action-button { background-color: #dc3545; margin: 5px; }
        button.combat-action-button:hover { background-color: #c82333; }
        button.inventory-action-button { background-color: #ffc107; color: #212529; margin-left: 5px; padding: 3px 8px; font-size: 0.8em; }
        button.inventory-action-button:hover { background-color: #e0a800; }
        button.shop-action-button { background-color: #17a2b8; margin: 2px; font-size:0.9em; padding: 4px 8px;}
        button.shop-action-button:hover { background-color: #138496; }
        button:disabled { background-color: #ccc; cursor: not-allowed; }
        .draft-controls, .final-party-controls { text-align: center; margin-bottom: 30px; }
        .character-card { background-color: #f9f9f9; border: 1px solid #ddd; border-radius: 5px; padding: 15px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
        .character-card h4 { margin-top: 0; margin-bottom: 10px; color: #6a5acd; }
        .character-card p, .character-card div { margin: 5px 0; font-size: 0.9em; }
        .character-card strong { color: #555; }
        .character-card ul { list-style-type: none; padding-left: 0; margin-top: 5px; }
        .character-card li { margin-bottom: 3px; }
        .clothing-status { font-style: italic; color: #777; font-size: 0.85em; margin-left: 5px; }
        .columns-container { display: flex; gap: 20px; }
        .draft-pool-column { flex: 2; }
        .selected-party-column { flex: 1; background-color: #e9e4f7; padding: 15px; border-radius: 5px; border: 1px solid #c5b9e8; }
        .selected-party-column .character-card { background-color: #fff; }
        #partyStatus { font-weight: bold; margin-bottom: 15px; }
        .gear-section h5 { margin-bottom: 5px; margin-top: 10px; color: #4a3a71; font-size: 1em; }
        .gear-item-line { display: flex; justify-content: space-between; align-items: center;}
        .gear-item-line .item-name-bonuses { flex-grow: 1;}
        .gear-item-line button { font-size: 0.8em; padding: 2px 6px; margin-left: 5px; background-color: #6c757d;}
        .gear-item-line button:hover { background-color: #5a6268;}
        #gameArea { margin-top: 30px; padding: 20px; border: 2px solid #6a5acd; border-radius: 5px; }
        #partyStatsDisplay { display: flex; flex-wrap: wrap; gap: 20px; justify-content: space-around; margin-bottom: 20px; padding-bottom: 20px; border-bottom: 1px solid #eee; }
        .party-member-stats { background-color: #f9f9f9; border: 1px solid #ddd; border-radius: 5px; padding: 15px; width: calc(33.333% - 14px); min-width: 280px; box-sizing: border-box; }
        .party-member-stats h4 { margin-top: 0; color: #6a5acd; text-align: center; border-bottom: 1px solid #eee; padding-bottom: 5px; margin-bottom: 10px; }
        .party-member-stats ul { list-style: none; padding: 0; font-size: 0.9em; }
        .party-member-stats li { margin-bottom: 4px; }
        .party-member-stats strong { color: #555; }
        .needs-display { font-size: 0.8em; color: #4b0082; /* Indigo for needs */ }
        .character-level-xp { font-size: 0.85em; color: #20B2AA; /* LightSeaGreen for XP/Level */ margin-top: 5px; }
        .character-needs-speech { margin-top: 8px; padding: 5px; background-color: #f0e6ff; border-radius: 3px; font-style: italic; font-size: 0.85em; min-height: 1.5em; color: #333; border: 1px dashed #c5b9e8; }
        #mapContainer { text-align: center; margin-top: 20px; margin-bottom: 10px; }
        #mapDisplay { font-family: 'Courier New', Courier, monospace; font-size: 18px; line-height: 1.1; white-space: pre; background-color: #222; color: #ccc; padding: 10px; border: 1px solid #444; display: inline-block; margin-bottom: 10px; }
        .movement-controls { margin-bottom: 10px; }
        .movement-controls button { min-width: 50px; margin: 3px; }
        #poiActionsContainer { margin-top: 10px; text-align: center; }
        #gameOutput { margin-top: 15px; padding: 15px; background-color: #e8e8e8; min-height: 150px; max-height: 300px; text-align: left; white-space: pre-wrap; border-radius: 3px; border: 1px solid #ccc; overflow-y: auto; }
        #inventoryPanel { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 450px; max-height: 80vh; background-color: #fff; border: 2px solid #6a5acd; border-radius: 8px; padding: 20px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); z-index: 1000; overflow-y: auto; }
        #inventoryPanel h3 { margin-top: 0; text-align: center; border-bottom: 1px solid #eee; padding-bottom: 10px; }
        #inventoryList { list-style: none; padding: 0; }
        #inventoryList li { padding: 8px 0; border-bottom: 1px solid #f0f0f0; display: flex; justify-content: space-between; align-items: center; }
        #inventoryList li:last-child { border-bottom: none; }
        .item-details { flex-grow: 1; }
        .item-name { font-weight: bold; } .item-quantity { color: #555; font-size: 0.9em; } .item-type { color: #777; font-style: italic; font-size: 0.8em; margin-left: 10px; }
        .item-actions { flex-shrink: 0; }
        #gameControls { text-align: center; margin-top: 10px; }
        #shopInterface { margin-top:15px; padding:10px; border: 1px solid #007bff; border-radius: 5px; background-color: #f0f8ff; }
        #shopInterface h4 { margin-top:0; text-align: center; }
        .shop-section { margin-bottom:10px; }
        .shop-section ul { list-style: none; padding:0; }
        .shop-section li { display: flex; justify-content: space-between; align-items: center; padding: 3px 0; border-bottom: 1px dotted #ccc;}
        #combatArea { margin-top: 20px; padding: 15px; border: 2px dashed #dc3545; border-radius: 5px; background-color: #fff0f0; }
        #combatArea h3 { color: #dc3545; }
        .enemy-info, .combat-party-info { margin-bottom: 15px; }
        .enemy-info p, .combat-party-info p { margin: 5px 0; }
        #combatActions { text-align: center; }
        .hp-bar-container { width: 100px; height: 10px; background-color: #e0e0e0; border: 1px solid #ccc; display: inline-block; margin-left: 5px; vertical-align: middle; }
        .hp-bar { height: 100%; background-color: #28a745; width: 100%; }
        .hp-bar.low { background-color: #ffc107; }
        .hp-bar.critical { background-color: #dc3545; }
        .need-bar-container { width: 80px; height: 8px; background-color: #e0e0e0; border: 1px solid #ccc; display: inline-block; margin-left: 3px; }
        .need-bar { height: 100%; }
        .bladder-bar { background-color: #ffd700; /* Yellow */ }
        .bowel-bar { background-color: #8B4513; /* SaddleBrown */ }
        .hygiene-bar { background-color: #add8e6; /* Light Blue */ }
    </style>
</head>
<body>
    <div class="container">
        <h1>Text-Based RPG - Full System (Final Compilation)</h1>

        <div id="draftingInterface">
            <div class="draft-controls">
                <label for="poolSize">Number of characters in draft pool:</label>
                <input type="number" id="poolSize" value="8" min="3" max="20" style="width: 50px; padding: 5px; margin-right:10px;">
                <button id="generatePoolBtn">Generate Draft Pool</button>
                <button id="finalizePartyBtn" disabled>Finalize Party (0/3)</button>
            </div>
            <div class="columns-container">
                <div class="draft-pool-column"><h2>Available Recruits</h2><div id="draftPoolArea"><p>Click "Generate Draft Pool"...</p></div></div>
                <div class="selected-party-column"><h2>Your Party</h2><div id="partyStatus">Selected: 0/3</div><div id="selectedPartyArea"><p>Draft characters...</p></div></div>
            </div>
        </div>

        <div id="finalPartyDisplay" style="display:none;" class="final-party-controls">
            <h2>Your Final Party!</h2>
            <div id="finalPartyCardsContainer" style="display:flex; flex-wrap:wrap; justify-content:center; gap:15px;"></div>
            <button id="beginGameBtn" class="positive-action" style="margin-top:20px;">Begin Your Adventure!</button>
        </div>

        <div id="gameArea" style="display:none;">
             <h2>The Adventure Begins!</h2>
            <p id="gameIntroMessage" style="text-align:center; margin-bottom: 10px;"></p>
            <p style="text-align:center; margin-bottom: 20px;"><strong>Party Gold: <span id="partyGoldDisplay">0</span></strong></p>
            <div id="partyStatsDisplay"></div>
            <div id="mapContainer">
                <pre id="mapDisplay">Map will appear here...</pre>
                <div class="movement-controls">
                    <button id="moveNorthBtn">N</button><br/>
                    <button id="moveWestBtn">W</button>
                    <span style="display: inline-block; width: 50px;"></span>
                    <button id="moveEastBtn">E</button><br/>
                    <button id="moveSouthBtn">S</button>
                </div>
                <div id="gameControls">
                    <button id="toggleInventoryBtn">Inventory</button>
                    <button id="relieveSelfBtn">Relieve Self (Wild)</button>
                </div>
            </div>
            <div id="shopInterface" style="display:none;"></div>
            <div id="combatArea" style="display:none;">
                <h3>Combat!</h3>
                <div class="enemy-info">
                    <p><strong>Enemy:</strong> <span id="enemyName"></span></p>
                    <p><strong>HP:</strong> <span id="enemyHP"></span>
                        <span class="hp-bar-container"><span id="enemyHPBar" class="hp-bar"></span></span>
                    </p>
                </div>
                <div class="combat-party-info">
                    <h4>Your Party:</h4>
                    <div id="combatPartyStatus"></div>
                </div>
                <div id="combatActions"></div>
            </div>
            <div id="gameOutput">Game messages will appear here...</div>
            <div id="poiActionsContainer"></div>
        </div>

        <div id="inventoryPanel" style="display:none;">
            <h3>Party Inventory</h3>
            <ul id="inventoryList"></ul>
            <button id="closeInventoryBtn" style="display:block; margin: 15px auto 0;">Close</button>
        </div>
    </div>

    <script>
        // --- Constants and Data ---
        const namePools = { ancient_china: ["Mei", "Lian", "Bao", "Jiao", "Nuo", "Ai", "Fen", "Hua", "Jia", "Lan"], egypt: ["Nefertari", "Merit", "Ankhesen", "Tiye", "Sitre", "Iset", "Kiya", "Mut"], rome: ["Livia", "Julia", "Octavia", "Cornelia", "Antonia", "Flavia", "Claudia", "Marcia"], medieval_europe: ["Genevieve", "Isolde", "Eleanor", "Matilda", "Adela", "Beatrice", "Blanche", "Constance"], early_1900s: ["Evelyn", "Mary", "Elizabeth", "Dorothy", "Margaret", "Helen", "Florence", "Alice"], modern: ["Alex", "Olivia", "Sophia", "Emily", "Chloe", "Maya", "Jordan", "Skyler"] };
        const timePeriodKeys = Object.keys(namePools);
        const timePeriodDisplayNames = { ancient_china: "Ancient China (Noblewoman)", egypt: "Ancient Egypt", rome: "Ancient Rome", medieval_europe: "Medieval Europe", early_1900s: "Early 1900s", modern: "Modern Era" };
        const periodStatConfig = { ancient_china: { bladderMin: 300, bladderMax: 600, bowelMin: 150, bowelMax: 350, stinkRateMin: 4, stinkRateMax: 8 }, egypt: { bladderMin: 280, bladderMax: 580, bowelMin: 160, bowelMax: 380, stinkRateMin: 5, stinkRateMax: 9 }, rome: { bladderMin: 320, bladderMax: 620, bowelMin: 140, bowelMax: 340, stinkRateMin: 4, stinkRateMax: 8 }, medieval_europe: { bladderMin: 250, bladderMax: 550, bowelMin: 180, bowelMax: 400, stinkRateMin: 6, stinkRateMax: 10 }, early_1900s: { bladderMin: 350, bladderMax: 650, bowelMin: 120, bowelMax: 300, stinkRateMin: 3, stinkRateMax: 7 }, modern: { bladderMin: 380, bladderMax: 700, bowelMin: 100, bowelMax: 280, stinkRateMin: 1, stinkRateMax: 5 } };
        const baseStatsToRoll = ['magicPower'];
        const allStatKeys = ['level', 'xp', 'xpToNextLevel', 'hp', 'maxHp', 'bladderCurrent', 'bladderSize', 'bowelCurrent', 'bowelSize', 'hygieneCurrent', 'stinkRate', 'magicPower', 'strength', 'defense'];
        const gearSlots = ["underwear", "upper", "lower", "head", "hands", "accessory"];
        const clothingSlotsForAccidents = ["underwear", "lower", "upper"];
        const periodGear = {
            ancient_china: {
                underwear: [{name: "Silk Dudou", defense_bonus: 1, slot: "underwear", value: 5, price: 15, equippable: true}, {name: "Linen Bindings", slot: "underwear", value: 2, price: 8, equippable: true, defense_bonus: 0}],
                upper: [{name: "Embroidered Ruqun Blouse", defense_bonus: 1, slot: "upper", value: 10, price: 30, equippable: true}, {name: "Silk Hanfu Robe", defense_bonus: 2, slot: "upper", value: 25, price: 70, equippable: true}],
                lower: [{name: "Layered Ruqun Skirt", defense_bonus: 1, slot: "lower", value: 10, price: 30, equippable: true}, {name: "Silk Trousers", slot: "lower", value: 8, price: 25, equippable: true, defense_bonus: 0}],
                head: [{name: "Ornamental Hairpins", slot: "head", value: 15, price: 40, equippable: true, defense_bonus: 0}, {name: "Phoenix Coronet", defense_bonus: 1, slot: "head", value: 50, price: 150, equippable: true}],
                hands: [{name: "Ceremonial Dagger", strength_bonus: 1, slot: "hands", value: 20, price: 50, equippable: true}, {name: "Ornate Fan", slot: "hands", value: 5, price: 15, equippable: true, strength_bonus: 0}],
                accessory: [{name: "Jade Pendant", slot: "accessory", value: 30, price: 80, equippable: true, defense_bonus: 0}, {name: "Scented Sachet", slot: "accessory", value: 3, price: 10, equippable: false, type: "utility"}]
            },
            egypt: {
                underwear: [{name: "Linen Loincloth", slot: "underwear", value: 1, price: 5, equippable: true, defense_bonus: 0}, {name: "Simple Linen Wrap", slot: "underwear", value: 1, price: 4, equippable: true, defense_bonus: 0}],
                upper: [{name: "Fine Kalasiris", defense_bonus: 1, slot: "upper", value: 12, price: 35, equippable: true}, {name: "Beaded Net Dress", defense_bonus: 1, slot: "upper", value: 20, price: 60, equippable: true}],
                lower: [{name: "Linen Kilt", slot: "lower", value: 3, price: 10, equippable: true, defense_bonus: 0}],
                head: [{name: "Nemes Headdress", defense_bonus: 1, slot: "head", value: 18, price: 50, equippable: true}, {name: "Simple Linen Headband", slot: "head", value: 2, price: 7, equippable: true, defense_bonus: 0}],
                hands: [{name: "Khopesh (Small)", strength_bonus: 2, slot: "hands", value: 30, price: 75, equippable: true}, {name: "Sistrum (Ritual Rattle)", slot: "hands", value: 8, price: 20, equippable: false, type: "utility"}],
                accessory: [{name: "Usekh Collar Necklace", defense_bonus: 1, slot: "accessory", value: 40, price: 100, equippable: true}, {name: "Scarab Amulet", slot: "accessory", value: 15, price: 40, equippable: true, defense_bonus: 0}]
            },
            rome: {
                underwear: [{name: "Subligaculum", slot: "underwear", value: 2, price: 6, equippable: true, defense_bonus: 0}, {name: "Strophium Breast Band", slot: "underwear", value: 2, price: 6, equippable: true, defense_bonus: 0}],
                upper: [{name: "Linen Tunica", defense_bonus: 1, slot: "upper", value: 5, price: 15, equippable: true}, {name: "Wool Stola", defense_bonus: 1, slot: "upper", value: 8, price: 25, equippable: true}],
                lower: [{name: "Simple Tunic Skirt", slot: "lower", value: 4, price: 12, equippable: true, defense_bonus: 0}],
                head: [{name: "Vitta Headband", slot: "head", value: 3, price: 9, equippable: true, defense_bonus: 0}, {name: "Ornate Hairpins", slot: "head", value: 10, price: 30, equippable: true, defense_bonus: 0}],
                hands: [{name: "Pugio Dagger", strength_bonus: 1, slot: "hands", value: 18, price: 45, equippable: true}, {name: "Stylus and Wax Tablet", slot: "hands", value: 4, price: 12, equippable: false, type: "utility"}],
                accessory: [{name: "Fibula Brooch", slot: "accessory", value: 7, price: 20, equippable: true, defense_bonus: 0}, {name: "Signet Ring", slot: "accessory", value: 20, price: 55, equippable: true, defense_bonus: 0}]
            },
            medieval_europe: {
                underwear: [{name: "Linen Chemise", defense_bonus: 1, slot: "underwear", value: 4, price: 12, equippable: true}, {name: "Linen Braies", slot: "underwear", value: 3, price: 9, equippable: true, defense_bonus: 0}],
                upper: [{name: "Kirtle Gown", defense_bonus: 1, slot: "upper", value: 15, price: 40, equippable: true}, {name: "Padded Aketon", defense_bonus: 3, slot: "upper", value: 30, price: 80, equippable: true}],
                lower: [{name: "Hose Stockings", slot: "lower", value: 5, price: 15, equippable: true, defense_bonus: 0}, {name: "Flowing Gown Skirt Part", defense_bonus: 1, slot: "lower", value: 10, price:30, equippable:true}],
                head: [{name: "Coif Cap", slot: "head", value: 2, price: 6, equippable: true, defense_bonus: 0}, {name: "Steel Cap", defense_bonus: 2, slot: "head", value: 25, price: 65, equippable: true}],
                hands: [{name: "Rondel Dagger", strength_bonus: 2, slot: "hands", value: 22, price: 55, equippable: true}, {name: "Shortsword", strength_bonus: 3, defense_bonus:1, slot: "hands", value: 40, price: 100, equippable: true}],
                accessory: [{name: "Leather Belt with Pouch", slot: "accessory", value: 6, price: 18, equippable: true, defense_bonus: 0}, {name: "Rosary Beads", slot: "accessory", value: 3, price: 10, equippable: false, type: "utility"}]
            },
            early_1900s: {
                underwear: [{name: "Corset & Chemise Set", slot: "underwear", value: 10, price: 30, equippable: true, defense_bonus: 0}, {name: "Knickers & Camisole", slot: "underwear", value: 8, price: 24, equippable: true, defense_bonus: 0}],
                upper: [{name: "High-Neck Blouse", slot: "upper", value: 7, price: 20, equippable: true, defense_bonus: 0}, {name: "Tailored Jacket", defense_bonus: 1, slot: "upper", value: 15, price: 45, equippable: true}],
                lower: [{name: "Long Gored Skirt", slot: "lower", value: 12, price: 35, equippable: true, defense_bonus: 0}],
                head: [{name: "Wide-brimmed Hat", slot: "head", value: 9, price: 28, equippable: true, defense_bonus: 0}, {name: "Cloche Hat", slot: "head", value: 7, price: 22, equippable: true, defense_bonus: 0}],
                hands: [{name: "Hat Pin (Makeshift)", strength_bonus: 1, slot: "hands", value: 2, price: 6, equippable: true}, {name: "Small Derringer Pistol", strength_bonus: 2, slot: "hands", value: 50, price: 130, equippable: true}],
                accessory: [{name: "Long Gloves", slot: "accessory", value: 6, price: 18, equippable: true, defense_bonus: 0}, {name: "Reticule Handbag", slot: "accessory", value: 4, price: 12, equippable: false, type: "utility"}]
            },
            modern: {
                underwear: [{name: "Bra & Panties Set", slot: "underwear", value: 5, price: 15, equippable: true, defense_bonus: 0}, {name: "Sports Attire", defense_bonus:1, slot: "underwear", value: 8, price: 25, equippable: true}],
                upper: [{name: "T-Shirt", slot: "upper", value: 3, price: 10, equippable: true, defense_bonus: 0}, {name: "Leather Jacket", defense_bonus: 2, slot: "upper", value: 40, price: 100, equippable: true}],
                lower: [{name: "Jeans", defense_bonus: 1, slot: "lower", value: 10, price: 30, equippable: true}, {name: "Tactical Pants", defense_bonus: 1, slot: "lower", value: 25, price: 65, equippable: true}],
                head: [{name: "Baseball Cap", slot: "head", value: 2, price: 8, equippable: true, defense_bonus: 0}, {name: "Combat Helmet", defense_bonus: 3, slot: "head", value: 50, price: 120, equippable: true}],
                hands: [{name: "Pocket Knife", strength_bonus: 1, slot: "hands", value: 8, price: 20, equippable: true}, {name: "Heavy Wrench", strength_bonus: 2, slot: "hands", value: 15, price: 40, equippable: true}],
                accessory: [{name: "Smartphone", slot: "accessory", value: 30, price: 100, equippable: false, type: "utility"}, {name: "Backpack", slot: "accessory", value: 5, price: 15, equippable: false, type: "utility"}]}
        };

        let draftableCharacters = []; let selectedParty = []; const MAX_PARTY_SIZE = 3;

        // DOM Elements
        const draftingInterface = document.getElementById('draftingInterface'); const generatePoolBtn = document.getElementById('generatePoolBtn'); const finalizePartyBtn = document.getElementById('finalizePartyBtn'); const poolSizeInput = document.getElementById('poolSize'); const draftPoolArea = document.getElementById('draftPoolArea'); const selectedPartyArea = document.getElementById('selectedPartyArea'); const partyStatusDiv = document.getElementById('partyStatus');
        const finalPartyDisplay = document.getElementById('finalPartyDisplay'); const finalPartyCardsContainer = document.getElementById('finalPartyCardsContainer'); const beginGameBtn = document.getElementById('beginGameBtn');
        const gameArea = document.getElementById('gameArea'); const gameIntroMessage = document.getElementById('gameIntroMessage'); const partyGoldDisplay = document.getElementById('partyGoldDisplay'); const partyStatsDisplay = document.getElementById('partyStatsDisplay');
        const mapDisplay = document.getElementById('mapDisplay'); const gameOutput = document.getElementById('gameOutput'); const poiActionsContainer = document.getElementById('poiActionsContainer'); const shopInterface = document.getElementById('shopInterface');
        const toggleInventoryBtn = document.getElementById('toggleInventoryBtn'); const inventoryPanel = document.getElementById('inventoryPanel'); const inventoryList = document.getElementById('inventoryList'); const closeInventoryBtn = document.getElementById('closeInventoryBtn');
        const combatArea = document.getElementById('combatArea'); const enemyNameDisplay = document.getElementById('enemyName'); const enemyHPDisplay = document.getElementById('enemyHP'); const enemyHPBar = document.getElementById('enemyHPBar'); const combatPartyStatus = document.getElementById('combatPartyStatus'); const combatActionsContainer = document.getElementById('combatActions');
        const relieveSelfBtn = document.getElementById('relieveSelfBtn');
        const moveNorthBtn = document.getElementById('moveNorthBtn'); const moveSouthBtn = document.getElementById('moveSouthBtn'); const moveEastBtn = document.getElementById('moveEastBtn'); const moveWestBtn = document.getElementById('moveWestBtn');


        // Map Variables
        const MAP_WIDTH = 25; const MAP_HEIGHT = 15; let gameMap = []; let playerPosition = { row: 0, col: 0 }; let pointsOfInterest = {}; let currentPOI = null;
        const POI_SYMBOLS = { TOWN: 'T', CAVE: 'C', FOREST: 'F', RUINS: 'R', SHRINE: 'S', LATRINE: 'L', SHOP: '$' };
        const poiDataDefinitions = {
            [POI_SYMBOLS.TOWN]: { name: "a Quaint Village", description: "You see a small, bustling village. Smoke rises from chimneys, and you hear the distant sound of a blacksmith's hammer.", actions: [ { text: "Talk to Villagers", handler: "talkToVillagers" }, { text: "Visit General Store", handler: "visitShop", shopType: "general" }, { text: "Use Outhouse", handler: "useOuthouse" }, { text: "Leave Village", handler: "leavePOI" } ], encounterChance: 0.05, enemies: ["Grumpy Farmer (Annoyed)", "Street Urchin (Pickpocket attempt)"] },
            [POI_SYMBOLS.SHOP]: { name: "a Bustling Marketplace Stall", description: "Various goods are on display. The merchant eyes you expectantly.", actions: [ { text: "Browse Wares", handler: "visitShop", shopType: "general" }, { text: "Leave Stall", handler: "leavePOI" }], encounterChance: 0, enemies: [] },
            [POI_SYMBOLS.LATRINE]: { name: "a Crude Latrine", description: "A roughly dug pit with a wooden seat. It's not pleasant, but it's functional.", actions: [ { text: "Use Latrine", handler: "useOuthouse"}, {text: "Leave", handler: "leavePOI"}], encounterChance: 0, enemies: [] },
            [POI_SYMBOLS.CAVE]: { name: "a Dark Cave Entrance", description: "A chill emanates from the dark maw of this cave. Strange echoes can be heard from within.", actions: [ { text: "Explore Deeper", handler: "exploreCave", rewards: [{ itemName: "Glowing Mushroom", quantity: 1, type: "misc", chance: 0.3, value: 1, price: 3 }], triggersCombat: true, combatEncounterChance: 0.5, combatEnemies: ["Goblin Scout", "Giant Spider"] }, { text: "Search Entrance", handler: "searchCaveEntrance", rewards: [{ itemName: "Old Coin", quantity: () => getRandomInt(1,3), type: "currency", chance: 0.6, value: 1, price: 1 }, { itemName: "Rusty Dagger", quantity: 1, type: "weapon", slot:"hands", strength_bonus: 1, chance: 0.2, value: 5, price: 15, equippable: true }], triggersCombat: true, combatEncounterChance: 0.2, combatEnemies: ["Cave Bat Swarm"] }, { text: "Leave Cave", handler: "leavePOI" } ], encounterChance: 0.1, enemies: ["Cave Bat Swarm"] },
            [POI_SYMBOLS.FOREST]: { name: "a Dense Forest", description: "The trees stand tall and close together, sunlight dappling the forest floor. The air is thick with the scent of pine and damp earth.", actions: [ { text: "Follow Animal Tracks", handler: "followTracks", triggersCombat: true, combatEncounterChance: 0.4, combatEnemies: ["Wolf"] }, { text: "Forage for Herbs", handler: "forageHerbs", rewards: [{ itemName: "Healing Herb", quantity: () => getRandomInt(1,2), type: "consumable", chance: 0.7, value: 3, price: 10 }, {itemName: "Common Berries", quantity: () => getRandomInt(2,5), type: "food", chance: 0.5, value: 0, price: 1}] }, { text: "Leave Forest", handler: "leavePOI" } ], encounterChance: 0.2, enemies: ["Bandit Ambusher"] },
            [POI_SYMBOLS.RUINS]: { name: "Crumbling Ancient Ruins", description: "Stone structures, weathered by time, jut out from the overgrown landscape. A sense of forgotten history hangs in the air.", actions: [ { text: "Investigate Structures", handler: "investigateRuins", rewards: [{itemName: "Ancient Tablet Fragment", quantity:1, type:"quest_item", chance: 0.25, value: 0, price: 0}], triggersCombat: true, combatEncounterChance: 0.3, combatEnemies: ["Restless Spirit"] },  { text: "Search for Artifacts", handler: "searchArtifacts", rewards: [{itemName: "Cracked Gemstone", quantity:1, type:"valuable", chance: 0.4, value: 20, price: 50}, {itemName: "Pottery Shard", quantity:() => getRandomInt(1,4), type:"misc", chance:0.6, value: 1, price: 2}] }, { text: "Leave Ruins", handler: "leavePOI" } ], encounterChance: 0.35, enemies: ["Restless Spirit", "Guardian Construct (Damaged)", "Treasure Hunter (Rival)"] },
            [POI_SYMBOLS.SHRINE]: { name: "a Serene Shrine", description: "A small, peaceful shrine stands here, dedicated to an unknown deity. Offerings of flowers and incense lie at its base.", actions: [ { text: "Offer a Prayer", handler: "offerPrayer", rewards: [{itemName: "Feeling of Peace", quantity:1, type:"buff_placeholder", chance:0.8, value: 0, price: 0}] }, { text: "Meditate Briefly", handler: "meditateShrine" }, { text: "Leave Shrine", handler: "leavePOI" } ], encounterChance: 0.0, enemies: [] }
        };
        const enemyDefinitions = { "Goblin Scout": { name: "Goblin Scout", maxHp: 15, hp: 15, attack: 8, defense: 2, xpValue: 10, rewards: [{itemName: "Small Pouch", quantity:1, type:"misc", chance:0.5, value: 1, price: 2}, {itemName:"Crude Dagger", quantity:1, type:"weapon", slot:"hands", strength_bonus:1, chance:0.2, value:5, price:15, equippable:true}]}, "Giant Spider": { name: "Giant Spider", maxHp: 25, hp: 25, attack: 10, defense: 3, xpValue: 20, rewards: [{itemName: "Spider Silk", quantity: () => getRandomInt(1,3), type:"crafting", chance:0.8, value: 2, price: 5}]}, "Cave Bat Swarm": { name: "Cave Bat Swarm", maxHp: 10, hp: 10, attack: 6, defense: 1, xpValue: 5, rewards: [] }, "Wolf": { name: "Wolf", maxHp: 20, hp: 20, attack: 9, defense: 2, xpValue: 15, rewards: [{itemName: "Wolf Pelt", quantity:1, type:"crafting", chance:0.6, value: 4, price: 10}]}, "Bandit Ambusher": { name: "Bandit Ambusher", maxHp: 18, hp: 18, attack: 9, defense: 3, xpValue: 12, rewards: [{itemName: "Stolen Coin", quantity:() => getRandomInt(2,10), type:"currency", chance:0.7, value:1, price:1}, {itemName:"Jerky", quantity:1, type:"food", chance:0.3, value:1, price:3}]}, "Restless Spirit": { name: "Restless Spirit", maxHp: 30, hp: 30, attack: 7, defense: 4, xpValue: 25, rewards: [{itemName: "Ectoplasm", quantity:1, type:"misc", chance:0.5, value:3, price:8}] } };

        // Game State
        let partyInventory = []; let partyGold = 50;
        let inCombat = false; let currentEnemy = null; let combatTurn = 0;
        const HYGIENE_MAX = 100; const BLADDER_INCREASE_PER_TICK = 20; const BOWEL_INCREASE_PER_TICK = 15; const HYGIENE_DECREASE_PER_TICK_BASE = 1;
        const XP_TO_NEXT_LEVEL = [0, 100, 250, 500, 800, 1200, 1700, 2300, 3000, 4000, 5500, 7200, 9000, 11000, 15000];
        const periodReactions = {
            bladder_moderate: { ancient_china: ["{name} subtly shifts her weight, a delicate fan hiding a slight grimace.", "{name} excuses herself for a moment, seeking a private corner of the gardens.", "{name} sips her tea slowly, trying to ignore the growing pressure.", "{name} delicately presses a hand to her lower abdomen under her robes.", "{name} finds it hard to concentrate on the poetry reading, her mind wandering to a different kind of release."], egypt: ["{name} glances towards the reed screens, her posture a little stiff.", "{name} discreetly adjusts her linen kilt.", "{name} takes a sudden interest in a distant hieroglyph, her focus feigned.", "{name}'s dark eyes betray a hint of discomfort as she watches the Nile flow.", "{name} wishes the incense smoke wasn't quite so strong today."], rome: ["{name} fidgets with the folds of her stola.", "{name} suggests a leisurely stroll towards the public latrines.", "{name} calls for a servant, perhaps for a chamber pot.", "{name} seems unusually restless during the poetry reading.", "{name} finds the sound of the nearby fountain almost unbearable."], medieval_europe: ["{name} crosses her legs tightly beneath her heavy gown.", "{name} eyes the nearest chamber pot with longing.", "{name} complains of a sudden chill, hoping for an excuse to retire.", "{name} tries to distract herself by examining the tapestries.", "{name} finds the lute music grating on her nerves."], early_1900s: ["{name} clears her throat, her smile a little strained.", "{name} inquires about the location of the 'necessary room'.", "{name} fans herself, looking slightly flustered.", "{name} subtly presses her thighs together.", "{name} hopes the sermon will end soon."], modern: ["{name} jiggles her leg, looking for the nearest restroom sign.", "{name} mutters about needing to 'powder her nose'.", "{name} checks her phone, pretending to be busy while shifting uncomfortably.", "{name} subtly squeezes her knees together.", "{name} taps her foot impatiently during the meeting."] },
            bladder_high: { ancient_china: ["{name}'s fan flutters erratically, her composure slipping.", "A faint whimper escapes {name} as she presses a hand to her lower abdomen.", "{name} urgently whispers to her attendant, her face pale.", "The jade ornaments in {name}'s hair tremble with her suppressed shivers.", "{name} can feel a dangerous warmth building; she *must* find relief soon."], egypt: ["{name} looks increasingly desperate, her breath hitching with each pang.", "{name} presses both hands to her lower belly, eyes wide with panic.", "The intricate beads on {name}'s dress seem to constrict her painfully.", "{name} is swaying slightly, her vision blurring at the edges.", "Each beat of the ceremonial drum feels like a hammer blow to her bladder."], rome: ["{name} can barely sit still, squirming on the marble bench.", "{name} is visibly sweating, her knuckles white as she clenches her fists.", "A pained gasp escapes {name} as a particularly strong urge hits; a few drops might have escaped.", "{name} looks pleadingly at the nearest exit, tears pricking her eyes.", "The thought of another long-winded senatorial speech is pure torture for {name} right now."], medieval_europe: ["{name} groans softly, her face contorted in discomfort.", "{name} is biting her lip so hard it might bleed, a tiny dribble escaping.", "The heavy wool of {name}'s gown feels suffocating as the pressure mounts, threatening to breach her control.", "{name} doubles over slightly, a hand pressed hard to her groin.", "If the feast doesn't end soon, {name} fears a very public humiliation."], early_1900s: ["{name}'s face is flushed and beaded with perspiration; she can feel her control wavering.", "{name} keeps glancing towards the door, her movements jerky and desperate.", "A small, desperate sound escapes {name}'s lips as she clenches every muscle.", "{name} grips the arms of her chair, trying to remain composed, but a tell-tale dampness is starting to form.", "{name} fears her corset might actually cause an accident if this goes on."], modern: ["{name} is doing the 'potty dance' quite vigorously now, unable to hide her distress.", "{name} groans, 'I REALLY gotta go! I can't hold it much longer! I think I'm leaking!'", "{name} frantically scans for any sign of a toilet, tears welling in her eyes.", "{name} is hopping from one foot to the other, her hand clamped between her legs.", "{name} whispers, 'Any second now... any second...'"] },
            bladder_leak: { ancient_china: ["A warm trickle escapes {name}, and she gasps, her fan falling from nerveless fingers. Her silks are darkening.", "{name} bites back a sob as she feels a small gush. 'Oh, no... not here!' she thinks, mortified.", "Despite her best efforts, {name} couldn't stop a little from leaking out, leaving a damp patch on her under-robe."], egypt: ["{name} flinches as a spurt of urine escapes, quickly soaking through her thin linen. Her eyes dart around to see if anyone noticed.", "The warmth spreading down {name}'s thigh is a horrifying sensation. She tries to appear calm, but her face is flushed.", "A small puddle is forming beneath {name}'s sandals. 'By Isis, no!' she silently prays."], rome: ["{name} hisses as a jet of liquid escapes, staining her stola. 'Gods dammit!' she mutters under her breath.", "The pressure was too much. {name} feels the humiliating wetness spread. She hopes the shadows hide it.", "A few drops, then a small stream... {name} clenches desperately, but her undergarments are already damp."], medieval_europe: ["{name} cries out softly as her control breaks for a moment, a warm wetness blooming under her heavy skirts.", "A tell-tale trickle runs down {name}'s leg. 'Saints preserve me,' she whispers, hoping the rushes hide it.", "The rough wool of her gown is now uncomfortably damp in a very embarrassing place."], early_1900s: ["{name} gasps as a small gush escapes, her petticoats no match for the sudden release. 'Oh, dear heavens!'", "The fine silk of her drawers is now wet. {name} blushes furiously, fanning herself with vigor.", "A small, dark stain appears on her skirt. {name} hopes her parasol can provide some cover."], modern: ["'Oops!' {name} exclaims as she feels a leak. 'Damn it, my jeans!'", "A little squirt escapes. {name} quickly crosses her legs, hoping the dark color of her pants hides it.", "Despite clenching, {name} can't stop a small trickle. 'Not good, not good!'"] },
            bladder_accident: { ancient_china: ["A dark stain spreads rapidly on {name}'s silk robes. Her face burns with shame as attendants rush to her, trying to shield her from view.", "The scent of urine fills the air around {name}, who stands frozen in humiliation, her elaborate hairstyle askew.", "Tears well in {name}'s eyes as she realizes what happened. Her reputation is surely soiled, her fine undergarments soaked.", "{name} sobs as the warmth spreads through her layers of clothing. Her fan drops to the floor with a clatter."], egypt: ["{name}'s linen kilt is suddenly dark and soaked. Her eyes widen in disbelief as the wetness spreads.", "A warm puddle forms at {name}'s feet on the cool stone floor. She looks down, aghast, her beaded collar feeling heavy.", "The fine pleats of {name}'s kalasiris are ruined by the spreading dampness. She tries to cover herself, but it's no use.", "{name} whimpers, the hieroglyphs blurring before her eyes as shame washes over her wet legs."], rome: ["{name} cries out as she wets her stola, the fabric clinging uncomfortably and revealing the outline of her soaked undergarments.", "Humiliation burns {name}'s cheeks as she realizes she's lost control, the warm liquid running down her thighs.", "The public bathhouse suddenly seems a world away as {name} stands in her own puddle, her sandals squelching.", "Servants avert their eyes as {name} struggles to maintain dignity, her fine tunic darkened with her accident."], medieval_europe: ["A stream of urine runs down {name}'s leg, pooling beneath her heavy woolen skirts. She sobs quietly, the rough fabric chafing her wet skin.", "The chamber pot was too far. {name} sits in a damp, smelly mess, utterly ashamed, her chemise clinging to her.", "The stench is immediate and strong. {name}'s elaborate hennin wobbles as she trembles from the shock and cold wetness.", "{name} hides her face in her hands, the coarse material of her gown now a disgusting reminder of her failure."], early_1900s: ["{name} jumps as her bladder gives way, a shocked noise escaping her. The fine fabric of her dress is ruined, the dark stain spreading quickly.", "Despite her best efforts and tight corset, {name} couldn't hold it. She tries to hide the evidence with her reticule, but it's too late.", "The plush velvet seat is now damp beneath {name}. She wants the earth to swallow her whole.", "A gasp escapes {name} as warmth spreads through her knickers and petticoats. She quickly tries to make an excuse and flee the scene, her cheeks flaming red."], modern: ["'Oh, god, no!' {name} exclaims as a puddle forms at her feet, soaking her sneakers. She's mortified.", "{name} tries to discreetly cover the wet spot on her jeans with her handbag, her cheeks flaming red.", "A gasp escapes {name}. She quickly tries to make an excuse and flee the scene, the dampness cold against her skin.", "{name} stares in horror at her wet pants, the urge to cry overwhelming."] },
            bowel_moderate: { ancient_china: ["{name} delicately places a hand on her stomach, a thoughtful frown on her face.", "{name} discreetly inquires about the location of the 'earthen closet'.", "{name} subtly adjusts the sash of her hanfu, a slight pressure building within.", "The rich palace food sometimes disagrees with {name}."], egypt: ["{name} looks a bit green around the gills, the scent of incense suddenly cloying.", "{name} shifts, trying to find a comfortable position on the reed mat.", "The heat seems to amplify {name}'s internal discomfort.", "{name} hopes the Pharaoh's procession doesn't last too much longer."], rome: ["{name} complains of a slight indigestion after the lavish feast.", "{name} subtly rubs her belly, hoping the discomfort will pass.", "The political debate is less interesting now that {name}'s stomach is gurgling.", "{name} wonders if the spiced wine was a mistake."], medieval_europe: ["{name} passes gas discreetly, hoping no one noticed the faint smell of cabbage.", "{name} feels a familiar rumbling; the pottage was perhaps too hearty.", "The drafty castle does little to soothe {name}'s churning insides.", "{name} wishes for a moment of privacy behind the arras."], early_1900s: ["{name} excuses herself, claiming a 'touch of the vapours' as her stomach cramps.", "{name} looks pale and uncomfortable, her whalebone corset feeling tighter than usual.", "The long carriage ride is not helping {name}'s delicate constitution.", "{name} discreetly presses her abdomen, hoping the urge subsides."], modern: ["{name} clutches her stomach, 'Oof, that street food might be staging a rebellion.'", "{name} says, 'My tummy feels a bit weird, hope it's not the sushi.'", "{name} shifts in her office chair, trying to ignore the gurgles.", "The deadline pressure isn't helping {name}'s nervous stomach."] },
            bowel_high: { ancient_china: ["{name} breaks into a slight sweat, her silk robes feeling too warm.", "A low rumble emanates from {name}'s abdomen, causing her to blush deeply behind her sleeve.", "{name} grips the sides of her palanquin, her knuckles white.", "Each step sends a jolt of urgency through {name}."], egypt: ["{name} is doubled over slightly, grimacing, her kohl-lined eyes wide with alarm.", "{name} desperately needs some privacy behind the papyrus screens, and soon.", "The ceremonial oils and perfumes now seem to mock {name}'s internal turmoil.", "Sweat beads on {name}'s brow as she fights the cramps."], rome: ["{name}'s face is pale and clammy, she looks like she might be sick at any moment.", "The pressure is becoming unbearable for {name}; the public forum is no place for this.", "Each oration seems to last an eternity as {name} struggles to maintain her composure.", "{name} can feel her insides clenching painfully."], medieval_europe: ["{name} groans, clutching her stomach. 'Not now, not during the joust!'", "{name} can't concentrate on anything but the intense need to find a garderobe.", "The smell of roasting meat at the banquet suddenly makes {name} feel nauseous.", "{name} is sweating profusely under her heavy velvet gown."], early_1900s: ["{name} is sweating and looks quite ill, her gloved hands clenched tightly.", "{name} urgently asks her chaperone for a moment alone, her voice strained.", "The waltz is a torture as {name} tries to hold back the inevitable.", "Every bump in the road during the motorcar ride is agony for {name}."], modern: ["'I think I'm gonna explode!' {name} whispers, her eyes darting around for an escape.", "{name} is bent over, desperately trying to hold it in, her face a mask of pain.", "The important presentation is about to start, and {name} can barely stand straight.", "{name} breaks out in a cold sweat, praying for a miracle or a very fast-acting Imodium."] },
            bowel_leak: { ancient_china: ["{name} pales as she feels a small, soft escape. The scent is faint, but her shame is immense.", "A wet, sticky feeling alarms {name}. She hopes her layered robes hide the evidence of her failing control.", "Despite her clenching, a bit of mess has soiled her innermost silks."], egypt: ["{name} winces as a smear of feces escapes, staining her loincloth. The desert heat will make this unpleasant quickly.", "The sudden, soft warmth is a horrifying sign. {name} prays to Anubis for a quick escape.", "A small, unfortunate sound accompanies the leak. {name} blushes furiously under her wig."], rome: ["{name} clenches her buttocks desperately, but a small, soft turd escapes into her subligaculum.", "'Oh, Jupiter!' {name} thinks in panic as she feels the tell-tale squish.", "The public baths suddenly seem very far away. {name} needs to deal with this soiled undergarment."], medieval_europe: ["{name} grunts with effort, but a little bit of her lunch makes an unwelcome reappearance. Her chemise is stained.", "The rough wool of her gown now has an unfortunate new aroma. {name} hopes the dogs don't notice.", "A wet, gassy explosion in her braies makes {name} jump. 'By the Rood!'"], early_1900s: ["{name} gasps as she feels a small, messy leak. Her carefully constructed composure crumbles.", "The whalebone corset offers no protection from this internal betrayal. Her drawers are soiled.", "A faint but distinct odor makes {name} want to sink through the floorboards."], modern: ["'Oh, no, was that a shart?' {name} thinks in horror, feeling a damp, messy patch in her underwear.", "A small, urgent fart escapes, and it wasn't just air. {name} needs to find a bathroom, NOW.", "The back of her pants feels suspiciously... lumpy. {name} discreetly tries to check."] },
            bowel_accident: { ancient_china: ["The distinct, earthy odor of feces announces {name}'s misfortune. Her elaborate silk gown is ruined, a dark, shameful stain spreading rapidly.", "{name} lets out a choked sob as she fouls herself, the warmth spreading uncomfortably through her underlayers. Her attendants look horrified.", "Mortified, {name} can only stare as the mess seeps through her clothing, the stench undeniable. Her carefully cultivated image is destroyed.", "The ornate cushions of her seat are now soiled. {name} wishes the earth would swallow her whole."], egypt: ["A horrid smell surrounds {name} as she messes her kilt, the thick substance staining the white linen. She looks utterly dejected.", "{name} has an accident, the evidence stark and smelly against the light-colored fabric. The sacred temple grounds feel defiled.", "The priestesses recoil as the odor reaches them. {name}'s offering is forgotten in her shame.", "{name} tries to flee, but the mess in her garments makes movement awkward and humiliating."], rome: ["{name} groans as her bowels betray her, soiling her fine tunic and toga. The mess is undeniable and the smell atrocious.", "Tears of shame stream down {name}'s face as she realizes the extent of her accident in the middle of the Forum. Senators stare.", "The marble floor is now stained beneath {name}. Her cries are lost in the hubbub of the city.", "Even the usually boisterous gladiators fall silent as {name} stands amidst her own filth."], medieval_europe: ["A loud, wet fart accompanies {name}'s accident, filling her heavy skirts with warm, soft filth. She weeps openly, the rough wool chafing her skin.", "The stench is overpowering, quickly spreading through the great hall. {name} has made a terrible mess of herself and the polished floor.", "Knights and ladies alike turn away in disgust. {name}'s social standing plummets with the contents of her bowels.", "The rushes on the floor do little to absorb the shameful deposit {name} has left."], early_1900s: ["{name} gasps and then moans as she loses control of her bowels during afternoon tea, staining her expensive lace dress. The smell is appalling and immediate.", "Despite her proper upbringing and restrictive undergarments, {name} couldn't prevent the accident. She's deeply embarrassed and physically uncomfortable, the mess warm and sticky.", "The antique chaise lounge is now irrevocably soiled. {name}'s reputation at the society gathering is in tatters.", "Her attempts to fan away the odor only make it worse. {name} wishes she could simply disappear."], modern: ["'Oh, crap!' {name} yells, then claps a hand over her mouth. The smell confirms her fears as a warm, soft mass fills her pants.", "{name} has a very public and messy accident during her important meeting. There's no hiding this, the stain is spreading on her trousers.", "The movie theater seat is now a biohazard. {name} tries to slink out, but the damage is done.", "Her favorite jeans are ruined. {name} can only stand there, legs trembling, as the reality of her situation sinks in."] },
            hygiene_low: { ancient_china: ["{name} subtly wrinkles her nose at a faint, musky odor she realizes is her own.", "A servant offers {name} a scented cloth, which she accepts gratefully, dabbing at her neck and wrists.", "{name}'s silk undergarments feel a bit sticky.", "She wishes for a bath filled with lotus petals."], egypt: ["{name} fans away a fly buzzing near her face; the desert heat makes her feel grimy.", "The scent of old sweat and Nile mud clings faintly to {name}.", "Her elaborate wig feels itchy and hot.", "She longs for the cool waters of a private pool."], rome: ["{name} discreetly tries to air out her toga, noticing a slightly sour smell.", "The public baths seem more appealing than usual today.", "Her skin feels gritty from the city dust.", "She hopes her expensive perfume is still working."], medieval_europe: ["{name} scratches an itch under her woolen tunic, the fabric feeling rough.", "The grime of travel is starting to show on {name}'s hands and face.", "She smells faintly of woodsmoke and unwashed bodies.", "A good scrub with harsh soap and water is sorely needed."], early_100s: ["{name} dabs at her brow with a lace handkerchief, feeling a bit unkempt.", "Her starched collar feels a bit sticky and her gloves are slightly soiled.", "She catches a whiff of her own perspiration during a vigorous dance.", "A lavender-scented bath sounds heavenly right now."], modern: ["{name} discreetly sniffs her armpit, making a mental note to reapply deodorant.", "{name} mentions needing a shower soon after her workout.", "Her hair feels a bit greasy.", "She wishes she'd had time to wash her favorite t-shirt."] },
            hygiene_very_low: { ancient_china: ["Even {name}'s most loyal attendants seem to keep a slight distance, their smiles strained.", "Flies buzz around {name} with unwelcome interest, ignoring her attempts to wave them away.", "The perfumed oils she uses can no longer mask the underlying body odor.", "{name} feels deeply unclean, a sensation foreign and horrifying to her noble sensibilities."], egypt: ["{name} smells strongly of sweat, dust, and something vaguely fishy from the market.", "Other people wrinkle their noses and step aside as {name} passes through the crowded bazaar.", "Her elaborate eye makeup is smudged with grime.", "Even the sacred cats seem to avoid her today."], rome: ["{name} is visibly grimy, and her toga smells quite ripe, a mixture of old sweat and city filth.", "No amount of expensive perfume can hide {name}'s current unwashed state. People openly stare.", "She can feel dirt caked in the creases of her skin.", "The thought of being presented at the Senate in this condition is appalling."], medieval_europe: ["{name} is caked in mud and smells like a privy mixed with stale ale. Even the pigs seem cleaner.", "Even the dogs in the great hall seem to avoid {name}, whining and backing away.", "Lice are a distinct possibility at this point.", "She fears she'll never feel truly clean again."], early_100s: ["{name}'s once-fine clothes are stained and she has a noticeable, offensive body odor.", "Passersby give {name} a wide berth, some even covering their noses. Her social standing is plummeting.", "She feels utterly disgusting, her skin crawling with grime.", "The thought of attending the evening's ball is now a source of dread rather than excitement."], modern: ["'Ugh, I seriously stink,' {name} complains, wrinkling her nose. She can smell herself, and it's not pleasant.", "People give {name} a much wider berth than usual, and she catches a few disgusted glances.", "She wouldn't dare hug anyone in this state.", "A long, hot shower with lots of soap is the only thing on her mind."] },
            dialogue_bladder_moderate: { ancient_china: ["{name} murmurs to {targetName}, 'The gardens seem inviting for a moment of quiet reflection.'", "{name} sighs to {targetName}, 'This endless ceremony... when might one find a moment's respite?'", "{name} whispers, 'I do hope there is a suitable chamber nearby.'"], egypt: ["{name} to {targetName}: 'Do you also feel the call of the reeds, sister?'", "{name} says quietly, 'My waters feel... insistent.'", "{name} to {targetName}, 'The sun is strong. One becomes quite... full.'"], rome: ["{name}: 'One must consider the bladder. A brief intermission, perhaps?'", "{name} to {targetName}: 'This wine flows through one rather quickly, doesn't it?'", "{name} mutters, 'Another hour of this, and I'll be testing the floor drains.'"], medieval_europe: ["{name}: 'My old bones ache, and my bladder along with them!'", "{name} to {targetName}: 'Think there's a pot behind that tapestry?'", "{name} groans to {targetName}, 'This ale goes right through a lass!'"], early_1900s: ["{name}: 'A lady must attend to her needs. If you'll excuse me.'", "{name} coughs to {targetName}, 'This tea is rather... diuretic.'", "{name} to {targetName}, 'I find the air a trifle close. Perhaps a brief walk to the... retiring room?'"], modern: ["{name}: 'Gotta pee soon.'", "{name} to {targetName}: 'Is there a bathroom around here? My back teeth are floating.'", "{name}: 'This movie is long. Hope I can make it.'"] },
            dialogue_bladder_high: { ancient_china: ["{name}, voice tight, to {targetName}: 'Attendant! The... the retiring screen! Now!'", "{name} to {targetName}, urgently: 'I can hold this no longer! Forgive my haste!'", "{name} hisses, 'If I do not find relief, there will be an incident most unbefitting my station!'"], egypt: ["{name} groans to {targetName}, 'By Horus, I must find a secluded spot or burst!'", "{name} to {targetName}: 'If I don't relieve myself, the Nile itself will seem but a trickle!'", "{name}, panting: 'The sacred waters... they demand release! Urgently!'"], rome: ["{name} to {targetName}: 'Enough! I must to the latrine, Senate or no Senate!'", "{name} to {targetName}: 'Don't make me laugh! I'm about to spring a leak that'd shame the aqueducts!'", "{name}, almost crying: 'My bladder is about to declare independence!'"], medieval_europe: ["{name} to {targetName}: 'Bugger this, I'm finding a bush! Can't hold it!'", "{name} to {targetName}: 'If I wet myself in this armor, I'll rust shut!'", "{name} shouts, 'A pot! A privy! For the love of God, anything!'"], early_1900s: ["{name}, fanning furiously, to {targetName}: 'I simply MUST be excused! This is an emergency of the utmost delicacy!'", "{name} to {targetName}, almost in tears: 'I'm going to have an accident if I don't find a W.C. this instant! My reputation will be ruined!'", "{name}: 'This is simply unbearable! One cannot be expected to endure such... pressure!'"], modern: ["{name} to {targetName}: 'HOLY CRAP, I'M GONNA PEE EVERYWHERE! DON'T MAKE ME LAUGH!'", "{name} to {targetName}: 'Cross your legs for me, this is critical! Bathroom! NOW! I'M LEAKING!'", "{name} hopping: 'Code Yellow! Code Yellow! Imminent dam breach!'"] },
            dialogue_bowel_moderate: { ancient_china: ["{name} to {targetName}: 'The spices today were... vigorous. One hopes for a swift resolution.'", "{name} delicately rubs her abdomen, 'A moment of privacy would be... beneficial.'"], egypt: ["{name} to {targetName}: 'My stomach feels... heavy. Like a stone from the pyramids.'", "{name}: 'The dates from the offering... perhaps too many.'"], rome: ["{name} to {targetName}: 'The oysters at Lucullus's feast... a gamble, as always.'", "{name}, looking thoughtful: 'One's humours feel... imbalanced.'"], medieval_europe: ["{name} to {targetName}: 'That eel pie is rumbling like thunder in my guts.'", "{name}: 'A manchet of bread might settle this... or make it worse.'"], early_1900s: ["{name} to {targetName}: 'One's digestion is not quite... settled after that rich pâté.'", "{name}: 'I do hope the plumbing in this establishment is... adequate.'"], modern: ["{name} to {targetName}: 'Ugh, pretty sure that burrito is about to stage a coup.'", "{name}: 'My stomach's making some weird noises. You hear that?'"] },
            dialogue_bowel_high: { ancient_china: ["{name}, clutching her stomach, to {targetName}: 'The call of nature is... most insistent. I must withdraw with all haste!'", "{name}, face pale: 'The Emperor's banquet... a trial for the strongest constitution.'"], egypt: ["{name}, sweating, to {targetName}: 'The desert demons churn within! I need the offering pit before I disgrace us all!'", "{name}: 'My insides are doing the dance of the cobra!'"], rome: ["{name} to {targetName}: 'To the forica! Lest I defile this sacred ground with... mortal refuse! And quickly!'", "{name}, groaning: 'I should not have had that third helping of garum-soaked dormice!'"], medieval_europe: ["{name}, groaning, to {targetName}: 'God's teeth, my bowels are about to give up the ghost! Out of my way, lest ye be caught in the... aftermath!'", "{name}: 'This is worse than the plague! Where is the nearest jakes?!'"], early_1900s: ["{name}, pale and trembling, to {targetName}: 'I require the lavatory with utmost urgency! This is not a drill! My corset feels like a vise!'", "{name}: 'Oh, the indignity! This is simply... explosive!'"], modern: ["{name} to {targetName}: 'IT'S COMING! I CAN'T STOP IT! WHERE'S THE NEAREST JOHN?! I'M CROWNING!'", "{name}, doubled over: 'This is a Code Brown DEFCON 1 situation! Evacuate the premises!'"] },
            dialogue_hygiene_low: { ancient_china: ["{name} to {targetName}: 'My dear, after our travels, perhaps a change of silks and some jasmine water would be... refreshing?'", "{name}: 'The dust of the road clings most unpleasantly.'"], egypt: ["{name} to {targetName}: 'I feel as though I carry the dust of a thousand deserts. A dip in the Nile calls, does it not?'", "{name}: 'Even the crocodiles smell sweeter than we do after that trek, {targetName}!'"], rome: ["{name} to {targetName}: 'Friend, do I detect a certain... aroma about our persons? The baths, perhaps, before we address the Senate?'", "{name}: 'By Hercules, {targetName}, I think even the gutter smells better than my toga right now! We are an offense to the gods!'"], medieval_europe: ["{name} to {targetName}: 'This journey has left us rather ripe, eh? A good scrubbing is in order before we see the Baron.'", "{name}: '{targetName}, do I smell like stale ale and regret, or is it just you? Perhaps both?'"], early_1900s: ["{name} to {targetName}: 'One begins to feel rather... unladylike after such a long train journey. A hot bath and fresh linen are in order.'", "{name}: 'My dear {targetName}, this motorcar excursion, while exhilarating, has left one feeling rather... unkempt and odorous.'"], modern: ["{name} to {targetName}: 'Phew, anyone else feel like they ran a marathon in a sauna? We need showers, like, stat.'", "{name}: '{targetName}, be honest, do I need to find a can of deodorant, or are we all just marinating in awesome adventure funk?'"] }
        };


        // --- Helper Functions ---
        function getRandomInt(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; }
        function getRandomElement(arr) { if (!arr || arr.length === 0) { if (this && this.isGearCall) { return { name: "None", defense_bonus: 0, strength_bonus: 0, slot: "none", value:0, price:0, equippable:false }; } return "N/A"; } return arr[getRandomInt(0, arr.length - 1)]; }

        // --- Character Generation ---
        function generateRandomCharacter(id) {
            const randomPeriodKey = getRandomElement(timePeriodKeys); const namesForPeriod = namePools[randomPeriodKey]; const randomName = getRandomElement(namesForPeriod);
            const config = periodStatConfig[randomPeriodKey]; const gearConfig = periodGear[randomPeriodKey];
            const character = { id: `char_${id}_${Date.now()}`, name: randomName, timePeriodKey: randomPeriodKey, timePeriodDisplay: timePeriodDisplayNames[randomPeriodKey], stats: {}, gear: {}, appearance: `A woman from ${timePeriodDisplayNames[randomPeriodKey]}.`, backstory: "Her past is shrouded in mystery.", skills: "Versatile." };
            character.stats.level = 1; character.stats.xp = 0; character.stats.xpToNextLevel = XP_TO_NEXT_LEVEL[1];
            character.stats.maxHp = 20 + getRandomInt(5,15); character.stats.hp = character.stats.maxHp;
            character.stats.bladderSize = getRandomInt(config.bladderMin, config.bladderMax); character.stats.bowelSize = getRandomInt(config.bowelMin, config.bowelMax); character.stats.stinkRate = getRandomInt(config.stinkRateMin, config.stinkRateMax);
            baseStatsToRoll.forEach(stat => { character.stats[stat] = getRandomInt(3, 7); });
            character.stats.strength = getRandomInt(3,6); character.stats.defense = getRandomInt(1,4);
            gearSlots.forEach(slot => { const selectedGearItem = JSON.parse(JSON.stringify(getRandomElement.call({isGearCall: true}, gearConfig[slot]))); if (clothingSlotsForAccidents.includes(slot) && selectedGearItem && selectedGearItem.name !== "None") { selectedGearItem.clothingStatus = ["clean"]; } character.gear[slot] = selectedGearItem; character.stats.defense += (selectedGearItem.defense_bonus || 0); character.stats.strength += (selectedGearItem.strength_bonus || 0); });
            character.stats.maxHp += (character.stats.defense * 3); character.stats.hp = character.stats.maxHp;
            character.stats.bladderCurrent = 0; character.stats.bowelCurrent = 0; character.stats.hygieneCurrent = HYGIENE_MAX;
            return character;
        }

        // --- UI Rendering for Character Cards ---
        function renderCharacterCard(character, isDraftable = true, isFinalView = false) {
            const card = document.createElement('div'); card.classList.add('character-card'); if (isFinalView) card.style.width = "300px"; card.dataset.characterId = character.id;
            let statsHtml = '<ul>';
            statsHtml += `<li class="character-level-xp"><strong>Lvl:</strong> ${character.stats.level} (XP: ${character.stats.xp}/${character.stats.xpToNextLevel})</li>`;
            if (character.stats.hp !== undefined) { statsHtml += `<li><strong>HP:</strong> ${character.stats.hp} / ${character.stats.maxHp}</li>`; }
            statsHtml += `<li class="needs-display">Bldr: ${character.stats.bladderCurrent}/${character.stats.bladderSize}mL <span class="need-bar-container"><span class="bladder-bar need-bar" style="width:${Math.min(100,(character.stats.bladderCurrent/character.stats.bladderSize)*100)}%"></span></span></li>`;
            statsHtml += `<li class="needs-display">Bwl: ${character.stats.bowelCurrent}/${character.stats.bowelSize}g <span class="need-bar-container"><span class="bowel-bar need-bar" style="width:${Math.min(100,(character.stats.bowelCurrent/character.stats.bowelSize)*100)}%"></span></span></li>`;
            statsHtml += `<li class="needs-display">Hygn: ${character.stats.hygieneCurrent}/${HYGIENE_MAX} <span class="need-bar-container"><span class="hygiene-bar need-bar" style="width:${Math.min(100,(character.stats.hygieneCurrent/HYGIENE_MAX)*100)}%"></span></span></li>`;
            allStatKeys.filter(k => !['level','xp','xpToNextLevel','hp', 'maxHp', 'bladderCurrent', 'bladderSize', 'bowelCurrent', 'bowelSize', 'hygieneCurrent'].includes(k)).forEach(statKey => { let statLabel = statKey.replace(/([A-Z])/g, ' $1').charAt(0).toUpperCase() + statKey.replace(/([A-Z])/g, ' $1').slice(1); if (statKey === "stinkRate") statLabel = "Stink Rate"; let statValue = character.stats[statKey]; statsHtml += `<li><strong>${statLabel}:</strong> ${statValue !== undefined ? statValue : 'N/A'}</li>`; }); statsHtml += '</ul>';
            let gearHtml = '<div class="gear-section"><h5>Gear:</h5><ul>';
            gearSlots.forEach(slot => {
                const slotLabel = slot.charAt(0).toUpperCase() + slot.slice(1);
                const item = character.gear[slot];
                let itemLine = `<div class="gear-item-line"><span class="item-name-bonuses">`;
                let itemName = item && item.name ? item.name : "None";
                let bonuses = []; if (item && item.defense_bonus) bonuses.push(`Def: ${item.defense_bonus}`); if (item && item.strength_bonus) bonuses.push(`Str: ${item.strength_bonus}`);
                let bonusString = bonuses.length > 0 ? ` (${bonuses.join(', ')})` : "";
                let clothingStatusString = "";
                if (item && item.clothingStatus && item.clothingStatus.length > 0 && !item.clothingStatus.includes("clean")) { clothingStatusString = `<span class="clothing-status">(${item.clothingStatus.join(', ')})</span>`; }
                itemLine += `<strong>${slotLabel}:</strong> ${itemName}${bonusString} ${clothingStatusString}</span>`;
                if (item && item.name !== "None" && !isFinalView && !isDraftable) { // Show unequip button only for selected party members not in final view
                    const unequipBtn = `<button onclick="handleUnequipItem('${character.id}', '${slot}')">Unequip</button>`;
                    itemLine += unequipBtn;
                }
                itemLine += `</div>`;
                gearHtml += `<li>${itemLine}</li>`;
            });
            gearHtml += '</ul></div>';
            card.innerHTML = `<h4>${character.name || 'Unnamed Character'}</h4><p><strong>Period:</strong> ${character.timePeriodDisplay}</p><div><strong>Stats:</strong>${statsHtml}</div>${gearHtml}<p><em>${character.appearance}</em></p>`;
            if (!isFinalView && isDraftable) { const draftButton = document.createElement('button'); draftButton.textContent = 'Draft'; draftButton.onclick = () => handleDraftCharacter(character.id); card.appendChild(draftButton); }
            return card;
        }

        // --- Drafting Logic ---
        function displayDraftPool() { draftPoolArea.innerHTML = ''; let displayedCount = 0; draftableCharacters.forEach(char => { if (!selectedParty.find(pChar => pChar.id === char.id)) { const card = renderCharacterCard(char, true, false); draftPoolArea.appendChild(card); displayedCount++; } }); if (displayedCount === 0) { if (draftableCharacters.length > 0 && selectedParty.length >= MAX_PARTY_SIZE) { draftPoolArea.innerHTML = '<p>Your party is full.</p>'; } else if (draftableCharacters.length > 0) { draftPoolArea.innerHTML = '<p>All drafted.</p>'; } else { draftPoolArea.innerHTML = '<p>No characters. Click "Generate".</p>'; } } }
        function displaySelectedParty() { selectedPartyArea.innerHTML = ''; if (selectedParty.length === 0) { selectedPartyArea.innerHTML = '<p>Draft characters.</p>'; } else { selectedParty.forEach(char => { const card = renderCharacterCard(char, false, false); selectedPartyArea.appendChild(card); }); } partyStatusDiv.textContent = `Selected: ${selectedParty.length}/${MAX_PARTY_SIZE}`; finalizePartyBtn.textContent = `Finalize Party (${selectedParty.length}/${MAX_PARTY_SIZE})`; finalizePartyBtn.disabled = selectedParty.length !== MAX_PARTY_SIZE; const draftPoolCards = draftPoolArea.querySelectorAll('.character-card'); draftPoolCards.forEach(cardElement => { const charId = cardElement.dataset.characterId; const draftButton = cardElement.querySelector('button'); if (draftButton) { draftButton.disabled = selectedParty.find(pChar => pChar.id === charId) || selectedParty.length >= MAX_PARTY_SIZE; } }); }
        function handleDraftCharacter(characterId) { if (selectedParty.length >= MAX_PARTY_SIZE) { alert(`Max ${MAX_PARTY_SIZE} party members.`); return; } const characterToAdd = draftableCharacters.find(char => char.id === characterId); if (characterToAdd && !selectedParty.find(pChar => pChar.id === characterId)) { selectedParty.push(characterToAdd); displaySelectedParty(); displayDraftPool(); } }
        function handleRemoveCharacter(characterId) { selectedParty = selectedParty.filter(char => char.id !== characterId); displaySelectedParty(); displayDraftPool(); }
        generatePoolBtn.addEventListener('click', () => { const numToGenerate = parseInt(poolSizeInput.value) || 8; draftableCharacters = []; selectedParty = []; for (let i = 0; i < numToGenerate; i++) { draftableCharacters.push(generateRandomCharacter(i)); } finalPartyDisplay.style.display = 'none'; gameArea.style.display = 'none'; inventoryPanel.style.display = 'none'; draftingInterface.style.display = 'block'; displayDraftPool(); displaySelectedParty(); });
        finalizePartyBtn.addEventListener('click', () => { if (selectedParty.length === MAX_PARTY_SIZE) { console.log("Final Party:", selectedParty); finalPartyCardsContainer.innerHTML = ''; selectedParty.forEach(char => { const card = renderCharacterCard(char, false, true); finalPartyCardsContainer.appendChild(card); }); draftingInterface.style.display = 'none'; finalPartyDisplay.style.display = 'block'; gameArea.style.display = 'none'; } else { alert(`Please select ${MAX_PARTY_SIZE} characters.`); } });

        // --- Needs Progression and Reactions ---
        function updateNeedsAndCheckReactions() {
            let reactionMessage = ""; let dialogueChance = 0.35;
            selectedParty.forEach(char => {
                if (inCombat && char.stats.hp <= 0) return;
                char.stats.bladderCurrent = Math.min(char.stats.bladderSize, char.stats.bladderCurrent + BLADDER_INCREASE_PER_TICK + getRandomInt(0,10));
                char.stats.bowelCurrent = Math.min(char.stats.bowelSize, char.stats.bowelCurrent + BOWEL_INCREASE_PER_TICK + getRandomInt(0,8));
                const hygieneDecrease = HYGIENE_DECREASE_PER_TICK_BASE + Math.floor(char.stats.stinkRate / 2) + (char.gear.underwear?.clothingStatus?.includes("soiled") || char.gear.lower?.clothingStatus?.includes("soiled") ? 3 : 0) + (char.gear.underwear?.clothingStatus?.includes("wet") || char.gear.lower?.clothingStatus?.includes("wet") ? 2 : 0) ;
                char.stats.hygieneCurrent = Math.max(0, char.stats.hygieneCurrent - hygieneDecrease);
                let hadBladderAccident = false; let hadBowelAccident = false;
                if (char.stats.bladderCurrent >= char.stats.bladderSize) { hadBladderAccident = true; reactionMessage += getRandomReaction(char, 'bladder_accident', true) + "\n"; char.stats.bladderCurrent = 0; char.stats.hygieneCurrent = Math.max(0, char.stats.hygieneCurrent - 40 - getRandomInt(10,30)); clothingSlotsForAccidents.forEach(slotKey => { if (char.gear[slotKey] && char.gear[slotKey].name !== "None") { if (!char.gear[slotKey].clothingStatus) char.gear[slotKey].clothingStatus = []; if (!char.gear[slotKey].clothingStatus.includes("wet")) char.gear[slotKey].clothingStatus.push("wet"); char.gear[slotKey].clothingStatus = char.gear[slotKey].clothingStatus.filter(s => s !== "clean"); }}); }
                if (char.stats.bowelCurrent >= char.stats.bowelSize) { hadBowelAccident = true; reactionMessage += getRandomReaction(char, 'bowel_accident', true) + "\n"; char.stats.bowelCurrent = 0; char.stats.hygieneCurrent = Math.max(0, char.stats.hygieneCurrent - 60 - getRandomInt(15,35)); clothingSlotsForAccidents.forEach(slotKey => { if (char.gear[slotKey] && char.gear[slotKey].name !== "None") { if (!char.gear[slotKey].clothingStatus) char.gear[slotKey].clothingStatus = []; if (!char.gear[slotKey].clothingStatus.includes("soiled")) char.gear[slotKey].clothingStatus.push("soiled"); if (char.gear[slotKey].clothingStatus.includes("wet") && slotKey !== "upper") { char.gear[slotKey].clothingStatus = char.gear[slotKey].clothingStatus.filter(s => s !== "wet");} char.gear[slotKey].clothingStatus = char.gear[slotKey].clothingStatus.filter(s => s !== "clean"); }}); }
                const bladderPercentage = (char.stats.bladderCurrent / char.stats.bladderSize);
                let bladderLeakChance = 0; if (bladderPercentage >= 0.98) bladderLeakChance = 0.90; else if (bladderPercentage >= 0.90) bladderLeakChance = 0.70; else if (bladderPercentage >= 0.80) bladderLeakChance = 0.50; else if (bladderPercentage >= 0.70) bladderLeakChance = 0.30;
                if (!hadBladderAccident && bladderPercentage >= 0.70 && char.stats.bladderCurrent < char.stats.bladderSize) { if(bladderPercentage >= 0.80) reactionMessage += getRandomReaction(char, 'bladder_high') + "\n"; else reactionMessage += getRandomReaction(char, 'bladder_moderate') + "\n"; if (Math.random() < bladderLeakChance) { const leak = getRandomInt(char.stats.bladderSize * 0.10, char.stats.bladderSize * 0.30); char.stats.bladderCurrent = Math.max(0, char.stats.bladderCurrent-leak); char.stats.hygieneCurrent = Math.max(0, char.stats.hygieneCurrent- (20 + Math.floor(leak/7)) ); reactionMessage += getRandomReaction(char, 'bladder_leak') + ` (-${leak.toFixed(0)}mL, -${(20 + Math.floor(leak/7))} Hygn)\n`; if(char.gear.underwear && char.gear.underwear.name !== "None" && char.gear.underwear.clothingStatus) { if(!char.gear.underwear.clothingStatus.includes("wet")) char.gear.underwear.clothingStatus.push("wet"); char.gear.underwear.clothingStatus = char.gear.underwear.clothingStatus.filter(s=>s!=="clean");} if(leak > char.stats.bladderSize * 0.18 && char.gear.lower && char.gear.lower.name !== "None" && char.gear.lower.clothingStatus) { if(!char.gear.lower.clothingStatus.includes("damp")) char.gear.lower.clothingStatus.push("damp"); char.gear.lower.clothingStatus = char.gear.lower.clothingStatus.filter(s=>s!=="clean");} } }
                const bowelPercentage = (char.stats.bowelCurrent / char.stats.bowelSize);
                let bowelLeakChance = 0; if (bowelPercentage >= 0.98) bowelLeakChance = 0.75; else if (bowelPercentage >= 0.90) bowelLeakChance = 0.55; else if (bowelPercentage >= 0.80) bowelLeakChance = 0.30; else if (bowelPercentage >= 0.70) bowelLeakChance = 0.20;
                if (!hadBowelAccident && bowelPercentage >= 0.70 && char.stats.bowelCurrent < char.stats.bowelSize) { if(bowelPercentage >= 0.80) reactionMessage += getRandomReaction(char, 'bowel_high') + "\n"; else reactionMessage += getRandomReaction(char, 'bowel_moderate') + "\n"; if (Math.random() < bowelLeakChance) { const leak = getRandomInt(char.stats.bowelSize * 0.08, char.stats.bowelSize * 0.22); char.stats.bowelCurrent = Math.max(0, char.stats.bowelCurrent-leak); char.stats.hygieneCurrent = Math.max(0, char.stats.hygieneCurrent- (25 + Math.floor(leak/3)) ); reactionMessage += getRandomReaction(char, 'bowel_leak') + ` (-${leak.toFixed(0)}g, -${(25 + Math.floor(leak/3))} Hygn)\n`; if(char.gear.underwear && char.gear.underwear.name !== "None" && char.gear.underwear.clothingStatus) { if(!char.gear.underwear.clothingStatus.includes("stained")) char.gear.underwear.clothingStatus.push("stained"); char.gear.underwear.clothingStatus = char.gear.underwear.clothingStatus.filter(s=>s!=="clean");} if(leak > char.stats.bowelSize * 0.15 && char.gear.lower && char.gear.lower.name !== "None" && char.gear.lower.clothingStatus) { if(!char.gear.lower.clothingStatus.includes("lightly soiled")) char.gear.lower.clothingStatus.push("lightly soiled"); char.gear.lower.clothingStatus = char.gear.lower.clothingStatus.filter(s=>s!=="clean");} } }
                if (char.stats.hygieneCurrent < 15) { reactionMessage += getRandomReaction(char, 'hygiene_very_low') + "\n"; } else if (char.stats.hygieneCurrent < 40) { reactionMessage += getRandomReaction(char, 'hygiene_low') + "\n"; }
                if (Math.random() < dialogueChance && !hadBladderAccident && !hadBowelAccident) { const dialogueMsg = triggerPartyDialogueAboutNeeds(char); if (dialogueMsg) reactionMessage += dialogueMsg; }
            });
            if (reactionMessage) { appendToGameOutput(reactionMessage.trim()); }
            displayPartyStatsInGame();
        }
        function triggerPartyDialogueAboutNeeds(speaker) { const otherPartyMembers = selectedParty.filter(member => member.id !== speaker.id && member.stats.hp > 0); if (otherPartyMembers.length === 0) return ""; const target = getRandomElement(otherPartyMembers); let dialogueKey = null; const bladderPercentage = (speaker.stats.bladderCurrent / speaker.stats.bladderSize); const bowelPercentage = (speaker.stats.bowelCurrent / speaker.stats.bowelSize); if (bladderPercentage >= 0.85 && Math.random() < 0.7) dialogueKey = 'dialogue_bladder_high'; else if (bowelPercentage >= 0.85 && Math.random() < 0.7) dialogueKey = 'dialogue_bowel_high'; else if (bladderPercentage >= 0.55 && Math.random() < 0.5) dialogueKey = 'dialogue_bladder_moderate'; else if (bowelPercentage >= 0.55 && Math.random() < 0.5) dialogueKey = 'dialogue_bowel_moderate'; else if (speaker.stats.hygieneCurrent < 40 && Math.random() < 0.4) dialogueKey = 'dialogue_hygiene_low'; if (dialogueKey) { let reactionText = getRandomReaction(speaker, dialogueKey, false, target.name); if (reactionText && Math.random() < 0.3) { if (target.timePeriodKey === 'modern' || target.timePeriodKey === 'medieval_europe') { reactionText += `\n  ${target.name} mutters: "Tell me about it..."`; } else if (target.timePeriodKey === 'ancient_china' || target.timePeriodKey === 'early_1900s') { reactionText += `\n  ${target.name} nods discreetly, a flicker of understanding in her eyes.`; } } return reactionText ? `\n${reactionText}` : ""; } return ""; }
        function getRandomReaction(character, reactionCategory, isAccident = false, targetName = "") { const period = character.timePeriodKey; if (periodReactions[reactionCategory] && periodReactions[reactionCategory][period]) { const reactions = periodReactions[reactionCategory][period]; let reactionText = getRandomElement(reactions); reactionText = reactionText.replace("{name}", character.name); if (targetName) reactionText = reactionText.replace("{targetName}", targetName); if (isAccident) { let clothingDesc = ""; clothingSlotsForAccidents.forEach(slotKey => { if (character.gear[slotKey] && character.gear[slotKey].name !== "None" && character.gear[slotKey].clothingStatus && character.gear[slotKey].clothingStatus.length > 0 && !character.gear[slotKey].clothingStatus.includes("clean")) { clothingDesc += ` Her ${character.gear[slotKey].name} is ${character.gear[slotKey].clothingStatus.join(" and ")}.`; } }); reactionText += clothingDesc; } return reactionText; } return `(${character.name} has no reaction defined for ${reactionCategory} in ${period})`; }
        function appendToGameOutput(message) { gameOutput.textContent += (gameOutput.textContent ? "\n\n" : "") + message; gameOutput.scrollTop = gameOutput.scrollHeight; }

        // --- MAP FUNCTIONS ---
        function generateGameMap() { gameMap = []; pointsOfInterest = {}; const poiSymbolValues = Object.values(POI_SYMBOLS); const numPOIsToPlace = Math.floor((MAP_WIDTH * MAP_HEIGHT) * 0.07); for (let r = 0; r < MAP_HEIGHT; r++) { const row = Array(MAP_WIDTH).fill('.'); gameMap.push(row); } for (let i = 0; i < numPOIsToPlace; i++) { let placed = false; while (!placed) { const r = getRandomInt(0, MAP_HEIGHT - 1); const c = getRandomInt(0, MAP_WIDTH - 1); if (gameMap[r][c] === '.') { const poiTypeSymbol = getRandomElement(poiSymbolValues); gameMap[r][c] = poiTypeSymbol; pointsOfInterest[`${r}-${c}`] = { type: poiTypeSymbol, ...JSON.parse(JSON.stringify(poiDataDefinitions[poiTypeSymbol])) }; placed = true; } } } let playerPlaced = false; while (!playerPlaced) { const r = getRandomInt(0, MAP_HEIGHT - 1); const c = getRandomInt(0, MAP_WIDTH - 1); if (gameMap[r][c] === '.') { playerPosition = { row: r, col: c }; playerPlaced = true; } } }
        function renderGameMap() { let mapString = ""; for (let r = 0; r < MAP_HEIGHT; r++) { for (let c = 0; c < MAP_WIDTH; c++) { if (r === playerPosition.row && c === playerPosition.col) { mapString += '@'; } else { mapString += gameMap[r][c]; } } mapString += '\n'; } mapDisplay.textContent = mapString.trim(); }
        function movePlayer(dRow, dCol) { if (inCombat) { appendToGameOutput("You are in combat!"); return; } if (currentPOI) { appendToGameOutput(`You are at ${currentPOI.name}. Choose an action or leave.`); return; } const newRow = playerPosition.row + dRow; const newCol = playerPosition.col + dCol; if (newRow < 0 || newRow >= MAP_HEIGHT || newCol < 0 || newCol >= MAP_WIDTH) { appendToGameOutput("You can't move off the map!"); return; } playerPosition.row = newRow; playerPosition.col = newCol; appendToGameOutput("You moved."); updateNeedsAndCheckReactions(); renderGameMap(); checkAndEnterPOI(); }
        function checkAndEnterPOI() { const poiKey = `${playerPosition.row}-${playerPosition.col}`; if (pointsOfInterest[poiKey]) { currentPOI = pointsOfInterest[poiKey]; enterPOI(currentPOI); } else { currentPOI = null; poiActionsContainer.innerHTML = ''; if (gameOutput.textContent.endsWith("You moved.")) {appendToGameOutput("You are in an open area.");} shopInterface.style.display = 'none'; toggleMovementButtons(true); } }
        function toggleMovementButtons(enabled) { moveNorthBtn.disabled = !enabled; moveSouthBtn.disabled = !enabled; moveEastBtn.disabled = !enabled; moveWestBtn.disabled = !enabled; }

        // --- POI INTERACTION ---
        function enterPOI(poi) { shopInterface.style.display = 'none'; let message = `You have entered ${poi.name}.\n${poi.description}`; if (!inCombat && poi.encounterChance > 0 && Math.random() < poi.encounterChance) { const enemyToEncounter = getRandomElement(poi.enemies); if (enemyToEncounter && enemyDefinitions[enemyToEncounter]) { startCombat(enemyToEncounter); return; } } appendToGameOutput(message); renderPOIActions(poi.actions); toggleMovementButtons(false); }
        function renderPOIActions(actions) { poiActionsContainer.innerHTML = ''; actions.forEach(action => { const button = document.createElement('button'); button.textContent = action.text; button.classList.add('action-button'); button.onclick = () => { if (inCombat) { appendToGameOutput("Cannot perform POI actions during combat."); return; } let baseMessage = `Action: ${action.text}`; appendToGameOutput(baseMessage); let itemFoundThisAction = false; if (action.rewards && action.rewards.length > 0) { action.rewards.forEach(reward => { if (Math.random() < reward.chance) { addItemToInventory({ ...reward, itemName: reward.itemName, quantity: typeof reward.quantity === 'function' ? reward.quantity() : reward.quantity }); itemFoundThisAction = true; } }); } if (action.triggersCombat && Math.random() < (action.combatEncounterChance || 0)) { const enemyToFight = getRandomElement(action.combatEnemies); if (enemyToFight && enemyDefinitions[enemyToFight]) { appendToGameOutput(`An action here provokes a ${enemyToFight}!`); startCombat(enemyToFight); return; } } if (typeof window[action.handler] === 'function') { window[action.handler](currentPOI, action); } else { if (!itemFoundThisAction) appendToGameOutput(`${baseMessage} (Handler '${action.handler}' not implemented yet, or nothing happened).`); } updateNeedsAndCheckReactions(); }; poiActionsContainer.appendChild(button); }); }

        // --- POI Action Handlers ---
        function leavePOI() { shopInterface.style.display = 'none'; poiActionsContainer.style.display = 'block'; if (!inCombat && currentPOI) { appendToGameOutput(`You leave ${currentPOI.name}.`); currentPOI = null; poiActionsContainer.innerHTML = ''; toggleMovementButtons(true); renderGameMap(); updateNeedsAndCheckReactions(); } }
        function useOuthouse(poi, action) { appendToGameOutput("You use the facilities."); selectedParty.forEach(char => { char.stats.bladderCurrent = 0; char.stats.bowelCurrent = 0; ["underwear", "lower"].forEach(slotKey => { if (char.gear[slotKey] && char.gear[slotKey].name !== "None" && char.gear[slotKey].clothingStatus) { if ((char.gear[slotKey].clothingStatus.includes("wet") || char.gear[slotKey].clothingStatus.includes("damp")) && !char.gear[slotKey].clothingStatus.includes("soiled") && !char.gear[slotKey].clothingStatus.includes("stained")) { char.gear[slotKey].clothingStatus = ["clean"]; } } }); }); displayPartyStatsInGame(); }
        relieveSelfBtn.addEventListener('click', () => { if (inCombat) { appendToGameOutput("Cannot do that during combat!"); return; } if (currentPOI && currentPOI.type !== POI_SYMBOLS.FOREST && currentPOI.type !== POI_SYMBOLS.RUINS && currentPOI.type !== POI_SYMBOLS.CAVE) { appendToGameOutput("Find a more private place or proper facilities."); return; } appendToGameOutput("The party finds a discreet spot to relieve themselves."); selectedParty.forEach(char => { char.stats.bladderCurrent = 0; char.stats.bowelCurrent = 0; char.stats.hygieneCurrent = Math.max(0, char.stats.hygieneCurrent - 20); }); displayPartyStatsInGame(); updateNeedsAndCheckReactions(); });
        function visitShop(poi, action) { if (action.shopType) { appendToGameOutput(`You enter the ${action.shopType} shop.`); displayShop(action.shopType); } else { appendToGameOutput("There's no shop here."); } }
        function talkToVillagers(poi, action) { appendToGameOutput(`\nVillager: "Welcome, traveler!" (Dialogue NYI)`); } function exploreCave(poi, action) { appendToGameOutput(`\nYou venture deeper... (Cave content NYI)`); } function searchCaveEntrance(poi, action) { if (!gameOutput.textContent.includes("Acquired:")) appendToGameOutput(`\nYou search the cave entrance...`); } function followTracks(poi, action) { appendToGameOutput(`\nThe tracks disappear.`); } function forageHerbs(poi, action) { if (!gameOutput.textContent.includes("Acquired:")) appendToGameOutput(`\nYou forage for useful plants...`); } function investigateRuins(poi, action) { if (!gameOutput.textContent.includes("Acquired:")) appendToGameOutput(`\nYou examine the ancient stones...`); } function searchArtifacts(poi, action) { if (!gameOutput.textContent.includes("Acquired:")) appendToGameOutput(`\nYou sift through the rubble...`); } function offerPrayer(poi, action) { appendToGameOutput(`\nA sense of peace washes over you.`); if (gameOutput.textContent.includes("Feeling of Peace")) removeItemFromInventory("Feeling of Peace"); } function meditateShrine(poi, action) { appendToGameOutput(`\nYou feel refreshed.`); }

        // --- Shop System ---
        const shopInventories = { "general": [ { name: "Healing Herb", quantity: 10, type: "consumable", price: 15, value: 5 }, { name: "Crude Dagger", quantity: 2, type: "weapon", slot:"hands", strength_bonus: 1, price: 40, value: 10, equippable:true }, { name: "Linen Bindings", quantity: 3, type: "armor", slot:"underwear", price: 10, value: 2, equippable:true }, { name: "Travel Rations", quantity: 5, type: "food", price: 5, value: 1 } ] };
        function displayShop(shopType) { if (!shopInventories[shopType]) { appendToGameOutput("Shop closed."); shopInterface.style.display = 'none'; return; } shopInterface.innerHTML = `<h4>${shopType.charAt(0).toUpperCase() + shopType.slice(1)} Store</h4>`; shopInterface.style.display = 'block'; poiActionsContainer.style.display = 'none'; const shopStockSection = document.createElement('div'); shopStockSection.classList.add('shop-section'); shopStockSection.innerHTML = '<h5>Wares for Sale:</h5><ul></ul>'; const shopUl = shopStockSection.querySelector('ul'); shopInventories[shopType].forEach(item => { if (item.quantity > 0) { const li = document.createElement('li'); li.innerHTML = `<span>${item.name} (x${item.quantity}) - ${item.price} Gold</span>`; const buyBtn = document.createElement('button'); buyBtn.textContent = "Buy"; buyBtn.classList.add('shop-action-button'); buyBtn.onclick = () => handleBuyItem(item, shopType); li.appendChild(buyBtn); shopUl.appendChild(li); } }); shopInterface.appendChild(shopStockSection); const playerSellSection = document.createElement('div'); playerSellSection.classList.add('shop-section'); playerSellSection.innerHTML = '<h5>Your Items to Sell:</h5><ul></ul>'; const playerSellUl = playerSellSection.querySelector('ul'); partyInventory.forEach(item => { if (item.value > 0 && !isItemEquipped(item.name)) { const li = document.createElement('li'); li.innerHTML = `<span>${item.name} (x${item.quantity||1}) - Worth ${item.value} Gold each</span>`; const sellBtn = document.createElement('button'); sellBtn.textContent = "Sell 1"; sellBtn.classList.add('shop-action-button'); sellBtn.onclick = () => handleSellItem(item, shopType); li.appendChild(sellBtn); playerSellUl.appendChild(li); } }); if (playerSellUl.childElementCount === 0) playerSellUl.innerHTML = "<li>Nothing to sell.</li>"; shopInterface.appendChild(playerSellSection); const leaveShopBtn = document.createElement('button'); leaveShopBtn.textContent = "Leave Shop"; leaveShopBtn.style.marginTop = "10px"; leaveShopBtn.onclick = () => { shopInterface.style.display = 'none'; poiActionsContainer.style.display = 'block'; if (currentPOI) renderPOIActions(currentPOI.actions); }; shopInterface.appendChild(leaveShopBtn); }
        function handleBuyItem(shopItem, shopType) { if (partyGold >= shopItem.price) { partyGold -= shopItem.price; addItemToInventory({ ...shopItem, quantity: 1 }); const itemInShop = shopInventories[shopType].find(i => i.name === shopItem.name); if (itemInShop) itemInShop.quantity--; appendToGameOutput(`Bought ${shopItem.name} for ${shopItem.price} gold.`); updatePartyGoldDisplay(); displayShop(shopType); } else { appendToGameOutput("Not enough gold!"); } }
        function handleSellItem(playerItem, shopType) { partyGold += playerItem.value; removeItemFromInventory(playerItem.name, 1); appendToGameOutput(`Sold ${playerItem.name} for ${playerItem.value} gold.`); updatePartyGoldDisplay(); displayShop(shopType); }
        function isItemEquipped(itemName) { return selectedParty.some(char => Object.values(char.gear).some(gearPiece => gearPiece && gearPiece.name === itemName)); }
        function updatePartyGoldDisplay() { partyGoldDisplay.textContent = partyGold; }

        // --- Inventory & Equipping ---
        function promptCharacterToEquip(itemToEquip) { let charPrompt = "Equip on which character?\n"; selectedParty.forEach((char, i) => { charPrompt += `${i + 1}: ${char.name} (Current ${itemToEquip.slot}: ${char.gear[itemToEquip.slot]?.name || 'None'})\n`; }); const charIndexInput = prompt(charPrompt); if (charIndexInput !== null) { const charIndex = parseInt(charIndexInput) - 1; if (charIndex >= 0 && charIndex < selectedParty.length) { handleEquipItem(itemToEquip, selectedParty[charIndex]); } else { alert("Invalid character selection."); } } }
        function handleEquipItem(itemToEquip, character) {
            if (!itemToEquip.slot || !itemToEquip.equippable) { appendToGameOutput(`${itemToEquip.name} cannot be equipped or has no slot.`); return; }
            const currentEquipped = character.gear[itemToEquip.slot];
            let oldDefenseBonus = 0; let oldStrengthBonus = 0;
            let baseHpForChar = (character.stats.level - 1) * getRandomInt(3,7) + (20 + getRandomInt(5,15)); // Recalculate base HP before stat changes

            if (currentEquipped && currentEquipped.name !== "None") {
                oldDefenseBonus = currentEquipped.defense_bonus || 0; oldStrengthBonus = currentEquipped.strength_bonus || 0;
                character.stats.defense = Math.max(0, character.stats.defense - oldDefenseBonus);
                character.stats.strength = Math.max(0, character.stats.strength - oldStrengthBonus);
                addItemToInventory({ ...currentEquipped, quantity: 1 });
                appendToGameOutput(`${character.name} unequipped ${currentEquipped.name}.`);
            }
            const newItem = JSON.parse(JSON.stringify(itemToEquip));
            if (clothingSlotsForAccidents.includes(newItem.slot) && newItem.name !== "None") newItem.clothingStatus = ["clean"];
            character.gear[itemToEquip.slot] = newItem;
            character.stats.defense += (newItem.defense_bonus || 0); character.stats.strength += (newItem.strength_bonus || 0);

            character.stats.maxHp = baseHpForChar + (character.stats.defense * 3); // Apply new defense bonus
            character.stats.hp = Math.min(character.stats.hp, character.stats.maxHp);


            const invItemIndex = partyInventory.findIndex(inv => inv.name === itemToEquip.name && inv.slot === itemToEquip.slot && inv !== itemToEquip);
            if (invItemIndex > -1) { if (partyInventory[invItemIndex].quantity > 1) { partyInventory[invItemIndex].quantity--; } else { partyInventory.splice(invItemIndex, 1); } }
            else { console.warn("Equipped item not found in inventory to remove:", itemToEquip.name); }
            appendToGameOutput(`${character.name} equipped ${itemToEquip.name}.`);
            displayPartyStatsInGame(); renderInventory();
        }
        function handleUnequipItem(characterId, slotToUnequip) {
            const character = selectedParty.find(char => char.id === characterId);
            if (!character) return;
            const item = character.gear[slotToUnequip];
            if (item && item.name !== "None") {
                character.stats.defense = Math.max(0, character.stats.defense - (item.defense_bonus || 0));
                character.stats.strength = Math.max(0, character.stats.strength - (item.strength_bonus || 0));
                const baseHpForChar = (character.stats.level - 1) * getRandomInt(3,7) + (20 + getRandomInt(5,15));
                character.stats.maxHp = baseHpForChar + (character.stats.defense * 3);
                character.stats.hp = Math.min(character.stats.hp, character.stats.maxHp);
                addItemToInventory({ ...item, quantity: 1 });
                character.gear[slotToUnequip] = { name: "None", slot: slotToUnequip, value:0, price:0, equippable:false, clothingStatus: ["clean"] };
                appendToGameOutput(`${character.name} unequipped ${item.name} from ${slotToUnequip}.`);
                displayPartyStatsInGame();
            }
        }

        // --- Combat System ---
        function updateHPBar(element, currentVal, maxVal) { const percentage = Math.max(0, Math.min(100, (currentVal / maxVal) * 100)); element.style.width = percentage + '%'; element.classList.remove('low', 'critical'); if (percentage <= 25) element.classList.add('critical'); else if (percentage <= 50) element.classList.add('low'); }
        function renderCombatUI() { if (!currentEnemy) return; enemyNameDisplay.textContent = currentEnemy.name; enemyHPDisplay.textContent = `${currentEnemy.hp} / ${currentEnemy.maxHp}`; updateHPBar(enemyHPBar, currentEnemy.hp, currentEnemy.maxHp); combatPartyStatus.innerHTML = ''; selectedParty.forEach(member => { const p = document.createElement('p'); let memberStatus = `<strong>${member.name}:</strong> ${member.stats.hp} / ${member.stats.maxHp} HP <span class="hp-bar-container"><span class="hp-bar char-hp-bar-${member.id}"></span></span>`; if (member.stats.hp <= 0) memberStatus += " (KO'd)"; p.innerHTML = memberStatus; combatPartyStatus.appendChild(p); const memberHpBar = p.querySelector(`.char-hp-bar-${member.id}`); if(memberHpBar) updateHPBar(memberHpBar, member.stats.hp, member.stats.maxHp); }); combatActionsContainer.innerHTML = ''; if (combatTurn === 0 && selectedParty.some(m => m.stats.hp > 0)) { selectedParty.forEach(member => { if (member.stats.hp > 0) { const attackButton = document.createElement('button'); attackButton.textContent = `Attack with ${member.name}`; attackButton.classList.add('combat-action-button'); attackButton.onclick = () => handlePlayerAttack(member); combatActionsContainer.appendChild(attackButton); } }); } }
        function startCombat(enemyKey) { if (!enemyDefinitions[enemyKey]) { console.error("Enemy not found:", enemyKey); return; } inCombat = true; currentEnemy = JSON.parse(JSON.stringify(enemyDefinitions[enemyKey])); combatTurn = 0; combatArea.style.display = 'block'; poiActionsContainer.innerHTML = ''; toggleMovementButtons(false); appendToGameOutput(`Combat started with ${currentEnemy.name}!`); renderCombatUI(); }
        function handlePlayerAttack(attackingCharacter) { if (!inCombat || !currentEnemy || combatTurn !== 0 || attackingCharacter.stats.hp <= 0) return; let rawDamage = attackingCharacter.stats.strength + getRandomInt(-Math.floor(attackingCharacter.stats.strength * 0.15), Math.floor(attackingCharacter.stats.strength * 0.15) + 1); let actualDamage = Math.max(1, rawDamage - (currentEnemy.defense || 0)); currentEnemy.hp = Math.max(0, currentEnemy.hp - actualDamage); appendToGameOutput(`${attackingCharacter.name} attacks ${currentEnemy.name} with their ${attackingCharacter.gear.hands?.name || 'bare hands'} for ${actualDamage} damage!`); renderCombatUI(); if (currentEnemy.hp <= 0) { endCombat(true); } else { combatTurn = 1; setTimeout(enemyAttack, 1200); } }
        function enemyAttack() { if (!inCombat || !currentEnemy || currentEnemy.hp <= 0 || combatTurn !== 1) return; let targetableParty = selectedParty.filter(member => member.stats.hp > 0); if (targetableParty.length === 0) { endCombat(false); return; } let randomTarget = getRandomElement(targetableParty); let rawDamage = (currentEnemy.attack || 0) + getRandomInt(-Math.floor((currentEnemy.attack || 0)*0.1), Math.floor((currentEnemy.attack || 0)*0.1)+1); let actualDamage = Math.max(1, rawDamage - randomTarget.stats.defense); randomTarget.stats.hp = Math.max(0, randomTarget.stats.hp - actualDamage); appendToGameOutput(`${currentEnemy.name} attacks ${randomTarget.name} for ${actualDamage} damage!`); renderCombatUI(); if (selectedParty.every(member => member.stats.hp <= 0)) { endCombat(false); } else { combatTurn = 0; renderCombatUI(); } }
        function endCombat(playerWon) {
            inCombat = false; combatArea.style.display = 'none'; let xpGained = 0;
            if (playerWon) {
                xpGained = currentEnemy.xpValue || 0; appendToGameOutput(`You defeated ${currentEnemy.name}! Party gains ${xpGained} XP.`);
                selectedParty.forEach(member => { if (member.stats.hp > 0) { member.stats.xp += xpGained; checkLevelUp(member); } });
                if (currentEnemy.rewards && currentEnemy.rewards.length > 0) { currentEnemy.rewards.forEach(reward => { if (Math.random() < reward.chance) { addItemToInventory({ ...reward, itemName: reward.itemName, quantity: typeof reward.quantity === 'function' ? reward.quantity() : reward.quantity }); } }); }
            } else { appendToGameOutput(`Your party was defeated by ${currentEnemy.name}... Game Over (for now).`); }
            currentEnemy = null;
            if(currentPOI) { renderPOIActions(currentPOI.actions); toggleMovementButtons(false); } // Still in POI context
            else { toggleMovementButtons(true); poiActionsContainer.innerHTML = ''; } // Was on map, enable movement
            renderGameMap(); displayPartyStatsInGame();
        }
        function checkLevelUp(character) { while (character.stats.xp >= character.stats.xpToNextLevel && character.stats.level < XP_TO_NEXT_LEVEL.length -1 ) { character.stats.level++; appendToGameOutput(`${character.name} reached Level ${character.stats.level}!`); let hpBoost = getRandomInt(5, 10) + Math.floor(character.stats.defense / 2); character.stats.maxHp += hpBoost; character.stats.hp = character.stats.maxHp; appendToGameOutput(`  Max HP increased by ${hpBoost}!`); if (character.stats.level % 2 === 0) { character.stats.strength += 1; appendToGameOutput(`  Strength increased by 1!`); } else { character.stats.defense +=1; appendToGameOutput(`  Defense increased by 1!`);} if (character.stats.level % 3 === 0) { character.stats.magicPower +=1; appendToGameOutput(`  Magic Power increased by 1!`); } if (XP_TO_NEXT_LEVEL[character.stats.level]) { character.stats.xpToNextLevel = XP_TO_NEXT_LEVEL[character.stats.level]; } else { character.stats.xpToNextLevel = Math.floor(character.stats.xpToNextLevel * 1.5); } appendToGameOutput(`  Next level at ${character.stats.xpToNextLevel} XP.`); } }

        // --- Display Party Stats in Game ---
        function displayPartyStatsInGame() {
            partyStatsDisplay.innerHTML = '';
            selectedParty.forEach(character => {
                const memberDiv = document.createElement('div'); memberDiv.classList.add('party-member-stats');
                let statsHtml = `<h4>${character.name}</h4><ul>`;
                statsHtml += `<li class="character-level-xp"><strong>Lvl:</strong> ${character.stats.level} (XP: ${character.stats.xp}/${character.stats.xpToNextLevel})</li>`;
                statsHtml += `<li><strong>HP:</strong> ${character.stats.hp} / ${character.stats.maxHp} <span class="hp-bar-container"><span class="hp-bar char-hp-bar-${character.id}"></span></span></li>`;
                statsHtml += `<li class="needs-display">Bldr: ${character.stats.bladderCurrent}/${character.stats.bladderSize} <span class="need-bar-container"><span class="bladder-bar need-bar char-bldr-bar-${character.id}"></span></span></li>`;
                statsHtml += `<li class="needs-display">Bwl: ${character.stats.bowelCurrent}/${character.stats.bowelSize} <span class="need-bar-container"><span class="bowel-bar need-bar char-bwl-bar-${character.id}"></span></span></li>`;
                statsHtml += `<li class="needs-display">Hygn: ${character.stats.hygieneCurrent}/${HYGIENE_MAX} <span class="need-bar-container"><span class="hygiene-bar need-bar char-hyg-bar-${character.id}"></span></span></li>`;
                allStatKeys.filter(k => !['level','xp','xpToNextLevel','hp', 'maxHp', 'bladderCurrent', 'bladderSize', 'bowelCurrent', 'bowelSize', 'hygieneCurrent'].includes(k)).forEach(statKey => { let statLabel = statKey.replace(/([A-Z])/g, ' $1').charAt(0).toUpperCase() + statKey.replace(/([A-Z])/g, ' $1').slice(1); if (statKey === "stinkRate") statLabel = "Stink Rate"; let statValue = character.stats[statKey]; statsHtml += `<li><strong>${statLabel}:</strong> ${statValue !== undefined ? statValue : 'N/A'}</li>`; }); statsHtml += '</ul>';
                let gearListHtml = '<h5>Equipped Gear:</h5><ul>';
                gearSlots.forEach(slot => {
                    const slotLabel = slot.charAt(0).toUpperCase() + slot.slice(1); const item = character.gear[slot];
                    let itemLine = `<div class="gear-item-line"><span class="item-name-bonuses">`;
                    let itemName = item && item.name ? item.name : "None"; let bonuses = [];
                    if (item && item.defense_bonus) bonuses.push(`Def: ${item.defense_bonus}`); if (item && item.strength_bonus) bonuses.push(`Str: ${item.strength_bonus}`);
                    let bonusString = bonuses.length > 0 ? ` (${bonuses.join(', ')})` : "";
                    let clothingStatusString = "";
                    if (item && item.clothingStatus && item.clothingStatus.length > 0 && !item.clothingStatus.includes("clean")) { clothingStatusString = `<span class="clothing-status">(${item.clothingStatus.join(', ')})</span>`; }
                    itemLine += `<strong>${slotLabel}:</strong> ${itemName}${bonusString} ${clothingStatusString}</span>`;
                    if (item && item.name !== "None") { const unequipBtn = `<button onclick="handleUnequipItem('${character.id}', '${slot}')">Unequip</button>`; itemLine += unequipBtn; }
                    itemLine += `</div>`; gearListHtml += `<li>${itemLine}</li>`;
                });
                gearListHtml += '</ul>';
                const speechDiv = document.createElement('div'); speechDiv.classList.add('character-needs-speech'); speechDiv.id = `speech-${character.id}`;
                memberDiv.innerHTML = statsHtml + gearListHtml; memberDiv.appendChild(speechDiv);
                partyStatsDisplay.appendChild(memberDiv);
                const charHpBar = memberDiv.querySelector(`.char-hp-bar-${character.id}`); if(charHpBar) updateHPBar(charHpBar, character.stats.hp, character.stats.maxHp);
                const charBldrBar = memberDiv.querySelector(`.char-bldr-bar-${character.id}`); if(charBldrBar) updateHPBar(charBldrBar, character.stats.bladderCurrent, character.stats.bladderSize);
                const charBwlBar = memberDiv.querySelector(`.char-bwl-bar-${character.id}`); if(charBwlBar) updateHPBar(charBwlBar, character.stats.bowelCurrent, character.stats.bowelSize);
                const charHygBar = memberDiv.querySelector(`.char-hyg-bar-${character.id}`); if(charHygBar) updateHPBar(charHygBar, character.stats.hygieneCurrent, HYGIENE_MAX);
                updateCharacterNeedsSpeech(character, speechDiv);
            });
        }
                              // Begin Game
        beginGameBtn.addEventListener('click', () => {
            finalPartyDisplay.style.display = 'none';
            gameArea.style.display = 'block';
            inventoryPanel.style.display = 'none'; // Ensure inventory is hidden at game start

            updatePartyGoldDisplay(); // Initialize gold display
            const partyNames = selectedParty.map(char => char.name).join(', ');
            gameIntroMessage.textContent = `Your adventure begins with: ${partyNames}!`;

            displayPartyStatsInGame(); // Initial display of party stats
            generateGameMap();        // Create the map data
            renderGameMap();          // Display the initial map

            toggleMovementButtons(true); // Explicitly enable movement buttons
            checkAndEnterPOI();          // Check if starting on a POI

            if (!currentPOI && !inCombat) { // If not starting in POI and not immediately in combat
                appendToGameOutput("You find yourself on the world map. Use N,S,E,W to explore.");
            }
            console.log("Game Started. Party:", selectedParty, "POIs:", pointsOfInterest, "Inventory:", partyInventory);
        });

        // Movement button event listeners (ensure they are correctly defined after DOM elements)
        moveNorthBtn.addEventListener('click', () => movePlayer(-1, 0));
        moveSouthBtn.addEventListener('click', () => movePlayer(1, 0));
        moveEastBtn.addEventListener('click', () => movePlayer(0, 1));
        moveWestBtn.addEventListener('click', () => movePlayer(0, -1));

        // Initial draft UI state
        draftPoolArea.innerHTML = '<p>Click "Generate Draft Pool" to see available recruits.</p>';
        selectedPartyArea.innerHTML = '<p>Draft characters from the left.</p>';
    </script>
</body>
</html>
        function updateCharacterNeedsSpeech(character, speechDivElement) { if (!speechDivElement) { speechDivElement = document.getElementById(`speech-${character.id}`); } if (!speechDivElement) return; let speech = ""; const bladderPercentage = (character.stats.bladderCurrent / character.stats.bladderSize); const bowelPercentage = (character.stats.bowelCurrent / character.stats.bowelSize); let dialogueKey = null; if (bladderPercentage >= 0.90 && Math.random() < 0.75) dialogueKey = 'dialogue_bladder_high'; else if (bowelPercentage >= 0.90 && Math.random() < 0.75) dialogueKey = 'dialogue_bowel_high'; else if (bladderPercentage >= 0.60 && Math.random() < 0.55) dialogueKey = 'dialogue_bladder_moderate'; else if (bowelPercentage >= 0.60 && Math.random() < 0.55) dialogueKey = 'dialogue_bowel_moderate'; else if (character.stats.hygieneCurrent < 35 && Math.random() < 0.45) dialogueKey = 'dialogue_hygiene_low'; if(dialogueKey) speech = getRandomReaction(character, dialogueKey); speechDivElement.textContent = speech ? `"${speech}"` : ""; }
